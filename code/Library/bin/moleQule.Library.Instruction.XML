<?xml version="1.0"?>
<doc>
    <assembly>
        <name>moleQule.Library.Instruction</name>
    </assembly>
    <members>
        <member name="T:moleQule.Library.Instruction.FaltaAlumnoList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoList.GetListByPromocion(System.Boolean,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoList.GetListByAlumno(System.Boolean,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoList.GetList(System.Int64)">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.FaltaAlumnoInfo})">
            <summary>
            Builds a FaltaAlumnoList from a IList<!--<FaltaAlumnoInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.FaltaAlumno})">
            <summary>
            Builds a FaltaAlumnoList from a IList<!--<FaltaAlumno>-->
            </summary>
            <param name="list"></param>
            <returns>FaltaAlumnoList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.FaltaAlumno">
            <summary>
            Editable Root Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.CopyValues(moleQule.Library.Instruction.FaltaAlumno)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.DeleteAll">
            <summary>
            Elimina todos los Area. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.#ctor(moleQule.Library.Instruction.FaltaAlumno,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.FaltaAlumno.GetChild(moleQule.Library.Instruction.FaltaAlumno)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.FaltaAlumno.GetChild(moleQule.Library.Instruction.FaltaAlumno,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.FaltaAlumno.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.FaltaAlumno.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.Fetch(moleQule.Library.Instruction.FaltaAlumno)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumno.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <member name="T:moleQule.Library.Instruction.InformePreguntasList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasList.GetList(System.String)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.InformePreguntasInfo})">
            <summary>
            Builds a InformePreguntasList from a IList<!--<InformePreguntasInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.InformePreguntas})">
            <summary>
            Builds a InformePreguntasList from a IList<!--<InformePreguntas>-->
            </summary>
            <param name="list"></param>
            <returns>InformePreguntasList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Sesion_PromocionList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion_PromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Sesion_PromocionInfo})">
            <summary>
            Builds a Clase_ParteList from a IList<!--<Clase_ParteInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Clase_ParteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion_PromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Sesion_Promocion})">
            <summary>
            Builds a Clase_ParteList from IList<!--<Clase_Parte>-->
            </summary>
            <param name="list"></param>
            <returns>Clase_ParteList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Respuesta">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta.GetNewCode(moleQule.Library.Instruction.Respuestas)">
            <summary>
            Devuelve el siguiente código de Módulo.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta.GetNewSerial(moleQule.Library.Instruction.Respuestas)">
            <summary>
            Devuelve el siguiente Serial de Alumno.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Instructor_PromocionInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionInfo.Get(System.Data.IDataReader)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionPrint.CopyValues(moleQule.Library.Instruction.Instructor_PromocionInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.CursoFormacionList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoFormacionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.CursoFormacionInfo})">
            <summary>
            Builds a CursoFormacionList from a IList<!--<CursoFormacionInfo>-->
            </summary>
            <param name="list"></param>
            <returns>CursoFormacionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoFormacionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.CursoFormacion})">
            <summary>
            Builds a CursoFormacionList from IList<!--<CursoFormacion>-->
            </summary>
            <param name="list"></param>
            <returns>CursoFormacionList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.CursoFormacion">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.CursoFormacion.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoFormacion.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoFormacion.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.SesionInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionPrint.CopyValues(moleQule.Library.Instruction.SesionInfo,moleQule.Library.Instruction.InstructorInfo,moleQule.Library.Instruction.ClaseTeoricaList,moleQule.Library.Instruction.ClasePracticaList,moleQule.Library.Instruction.ClaseExtraList,System.String,System.Int64,System.Boolean)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Pregunta_Examen">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta_Examen.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta_Examen.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta_Examen.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Convocatoria_Curso">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_Curso.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_Curso.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_Curso.DeleteAll">
            <summary>
            Elimina todas los Convocatoria_Cursos
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_Curso.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoCliente">
            <summary>
            Editable Child Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.CopyFrom(moleQule.Library.Instruction.AlumnoClienteInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen de solo lectura</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.AddBusinessRules">
            <summary>
            Añade las reglas de validación necesarias para el objeto
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            Debe ser public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.#ctor(moleQule.Library.Instruction.AlumnoCliente,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoCliente.GetChild(moleQule.Library.Instruction.AlumnoCliente)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoCliente.GetChild(moleQule.Library.Instruction.AlumnoCliente,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoCliente.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoCliente.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.NewChild(moleQule.Library.Invoice.Cliente)">
            <summary>
            Crea un nuevo objeto hijo
            </summary>
            <param name="parent">Objeto padre</param>
            <returns>Nuevo objeto creado</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre, que
            debe utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.DataPortal_Create(moleQule.Library.CslaEx.BusinessBaseEx{moleQule.Library.Instruction.AlumnoCliente}.CriteriaCs)">
            <summary>
            Crea un objeto
            </summary>
            <param name="criteria">Criterios de consulta</param>
            <remarks>La llama el DataPortal a partir del New o NewChild</remarks>		
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.Fetch(moleQule.Library.Instruction.AlumnoCliente)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoCliente.Insert(moleQule.Library.Instruction.AlumnoClientes)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoCliente.Update(moleQule.Library.Instruction.AlumnoClientes)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoCliente.DeleteSelf(moleQule.Library.Instruction.AlumnoClientes)" -->
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.Insert(moleQule.Library.Invoice.Cliente)">
            <summary>
            Inserta un registro en la base de datos
            </summary>
            <param name="parent">Objeto padre</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCliente.Update(moleQule.Library.Invoice.Cliente)">
            <summary>
            Actualiza un registro en la base de datos
            </summary>
            <param name="parent">Objeto padre</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoCliente.DeleteSelf(moleQule.Library.Invoice.Cliente)" -->
        <!-- Badly formed XML comment ignored for member "P:moleQule.Library.Instruction.AlumnoCliente.IsValid" -->
        <!-- Badly formed XML comment ignored for member "P:moleQule.Library.Instruction.AlumnoCliente.IsDirty" -->
        <member name="T:moleQule.Library.Instruction.AlumnoCursoInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCursoInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PreguntaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.PreguntaInfo})">
            <summary>
            Builds a PreguntaList from a IList<!--<PreguntaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Pregunta})">
            <summary>
            Builds a PreguntaList from IList<!--<Pregunta>-->
            </summary>
            <param name="list"></param>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.FormatImagenList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.FormatCodigoList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.PreguntaInfo})">
            <summary>
            Builds a PreguntaList from a IList<!--<PreguntaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Pregunta},System.Boolean)">
            <summary>
            Builds a PreguntaList from a IList<!--<Pregunta>-->
            </summary>
            <param name="list"></param>
            <returns>Pregunta</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Pregunta})">
            <summary>
            Builds a PreguntaList from a IList<!--<Pregunta>-->
            </summary>
            <param name="list"></param>
            <returns>Pregunta</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetModuloList(System.Int64)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetPreguntasFiltradas(System.Int64,System.Int64,System.Int64,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetPreguntasModulo(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetPreguntasTema(System.Int64,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetPreguntasDisponiblesModulo(System.Int64,System.Boolean,System.DateTime,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetPreguntasDisponiblesTema(System.Int64,System.Boolean,System.DateTime,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetPreguntasTema(System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.GetPreguntasTema(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.SELECT">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.SELECT_PREGUNTAS">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.SELECT_PREGUNTAS_FILTRADAS(System.Int64,System.Int64,System.Int64,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.SELECT_BY_LIST(System.String)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.SELECT_LISTADO_EXAMEN_NO_EMITIDO(System.String)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaList.SELECT_LISTADO_EXAMEN_EMITIDO(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Historias">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Historias.SELECT">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.HistoriaList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.HistoriaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.HistoriaInfo})">
            <summary>
            Builds a HistoriaList from a IList<!--<HistoriaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>HistoriaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HistoriaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Historia})">
            <summary>
            Builds a HistoriaList from IList<!--<Historia>-->
            </summary>
            <param name="list"></param>
            <returns>HistoriaList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.TemaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.TemaInfo})">
            <summary>
            Builds a TemaList from a IList<!--<TemaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>TemaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Tema})">
            <summary>
            Builds a TemaList from IList<!--<Tema>-->
            </summary>
            <param name="list"></param>
            <returns>TemaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>TemaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>TemaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.TemaInfo})">
            <summary>
            Builds a TemaList from a IList<!--<TemaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>TemaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetModuloList(System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SubmoduloList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Tema})">
            <summary>
            Builds a TemaList from a IList<!--<Tema>-->
            </summary>
            <param name="list"></param>
            <returns>Tema</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulo_InstructorInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.DisponibilidadInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.DisponibilidadInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Clase_ParteList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Clase_ParteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Clase_ParteInfo})">
            <summary>
            Builds a Clase_ParteList from a IList<!--<Clase_ParteInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Clase_ParteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Clase_ParteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Clase_Parte})">
            <summary>
            Builds a Clase_ParteList from IList<!--<Clase_Parte>-->
            </summary>
            <param name="list"></param>
            <returns>Clase_ParteList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Horarios">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.HorarioInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioInfo.GetLast(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.FestivoInfo">
            <summary>
            ReadOnly Root Object
            ReadOnly Child Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoInfo.Get(System.Int64)">
            <summary>
            Obtiene un <see cref="!:ReadOnlyBaseEx"/> de la base de datos
            </summary>
            <param name="oid">Oid del objeto</param>
            <returns>Objeto <see cref="!:ReadOnlyBaseEx"/> construido a partir del registro</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoInfo.Fetch(System.Data.IDataReader)">
            <summary>
            Obtiene un objeto a partir de un <see cref="T:System.Data.IDataReader"/>.
            Obtiene los hijos si los tiene y se solicitan
            </summary>
            <param name="criteria"><see cref="T:System.Data.IDataReader"/> con los datos</param>
            <remarks>
            La utiliza el <see cref="!:ReadOnlyListBaseEx"/> correspondiente para construir los objetos de la lista
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoInfo.DataPortal_Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Obtiene un registro de la base de datos
            </summary>
            <param name="criteria"><see cref="T:moleQule.Library.CslaEx.CriteriaEx"/> con los criterios</param>
            <remarks>
            La llama el DataPortal
            </remarks>
        </member>
        <member name="T:moleQule.Library.Instruction.ExamenPromocionInfo">
            <summary>
            ReadOnly Child Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionInfo.Fetch(System.Data.IDataReader)">
            <summary>
            Obtiene un objeto a partir de un <see cref="T:System.Data.IDataReader"/>.
            Obtiene los hijos si los tiene y se solicitan
            </summary>
            <param name="criteria"><see cref="T:System.Data.IDataReader"/> con los datos</param>
            <remarks>
            La utiliza el <see cref="!:ReadOnlyListBaseEx"/> correspondiente para construir los objetos de la lista
            </remarks>
        </member>
        <member name="T:moleQule.Library.Instruction.Respuesta_Alumno_ExamenInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta_Alumno_ExamenInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Respuesta_Alumno_Examen">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta_Alumno_Examen.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta_Alumno_Examen.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta_Alumno_Examen.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Convocatoria_CursoList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Convocatoria_CursoInfo})">
            <summary>
            Builds a Convocatoria_CursoList from a IList<!--<Convocatoria_CursoInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Convocatoria_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Convocatoria_Curso})">
            <summary>
            Builds a Convocatoria_CursoList from IList<!--<Convocatoria_Curso>-->
            </summary>
            <param name="list"></param>
            <returns>Convocatoria_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>Convocatoria_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>Convocatoria_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Convocatoria_CursoInfo})">
            <summary>
            Builds a Convocatoria_CursoList from a IList<!--<Convocatoria_CursoInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>Convocatoria_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Convocatoria_Curso})">
            <summary>
            Builds a Convocatoria_CursoList from a IList<!--<Convocatoria_Curso>-->
            </summary>
            <param name="list"></param>
            <returns>Convocatoria_Curso</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_PracticaInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_PracticaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_ParteInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ParteInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_ConvocatoriaInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ConvocatoriaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoClienteInfo">
            <summary>
            ReadOnly Child Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteInfo.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataReader"/> origen de los datos</param>
            <param name="get_childs">Flag para obtener los hijos de la bd</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteInfo.#ctor(moleQule.Library.Instruction.AlumnoCliente,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="!:BusinessBaseEx"/> origen</param>
            <param name="copy_childs">Flag para copiar los hijos</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoClienteInfo.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.AlumnoClienteInfo.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.AlumnoClienteInfo.Fetch(System.Data.IDataReader)">
            <summary>
            Obtiene un objeto a partir de un <see cref="T:System.Data.IDataReader"/>.
            Obtiene los hijos si los tiene y se solicitan
            </summary>
            <param name="criteria"><see cref="T:System.Data.IDataReader"/> con los datos</param>
            <remarks>
            La utiliza el <see cref="!:ReadOnlyListBaseEx"/> correspondiente para construir los objetos de la lista
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientePrint.CopyValues(moleQule.Library.Instruction.AlumnoClienteInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoInfo.GetForForm(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoPrint.CopyValues(moleQule.Library.Instruction.AlumnoInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.FaltaAlumnoInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoInfo.CopyValues(moleQule.Library.Instruction.FaltaAlumno)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoInfo.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoInfo.#ctor(moleQule.Library.Instruction.FaltaAlumno)">
            <summary>
            Contructor de AreaInfo a partir de un Area
            No copia los hijos
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoInfo.Get(System.Int64)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FaltaAlumnoInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.InformePreguntasInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasInfo.CopyValues(moleQule.Library.Instruction.InformePreguntas)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasInfo.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasInfo.#ctor(moleQule.Library.Instruction.InformePreguntas)">
            <summary>
            Contructor de AreaInfo a partir de un Area
            No copia los hijos
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasInfo.Get(System.Int64)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntasInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Sesion_PromocionInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion_PromocionInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Preguntas_PlantillaList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas_PlantillaList.GetDisponiblesList(System.Int64,System.DateTime)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas_PlantillaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Preguntas_PlantillaInfo})">
            <summary>
            Builds a Preguntas_PlantillaList from a IList<!--<Preguntas_PlantillaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Preguntas_PlantillaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas_PlantillaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Preguntas_Plantilla})">
            <summary>
            Builds a Preguntas_PlantillaList from IList<!--<Preguntas_Plantilla>-->
            </summary>
            <param name="list"></param>
            <returns>Preguntas_PlantillaList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.CronogramaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.CronogramaInfo})">
            <summary>
            Builds a CronogramaList from a IList<!--<CronogramaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>CronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Cronograma})">
            <summary>
            Builds a CronogramaList from IList<!--<Cronograma>-->
            </summary>
            <param name="list"></param>
            <returns>CronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>CronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>CronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.CronogramaInfo})">
            <summary>
            Builds a CronogramaList from a IList<!--<CronogramaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>CronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Cronograma})">
            <summary>
            Builds a CronogramaList from a IList<!--<Cronograma>-->
            </summary>
            <param name="list"></param>
            <returns>Cronograma</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseTeorica">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeorica.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeorica.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeorica.DeleteAll">
            <summary>
            Elimina todas los ClaseTeoricas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeorica.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Instructor_PromocionList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Instructor_PromocionInfo})">
            <summary>
            Builds a Instructor_PromocionList from a IList<!--<Instructor_PromocionInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Instructor_PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Instructor_Promocion})">
            <summary>
            Builds a Instructor_PromocionList from IList<!--<Instructor_Promocion>-->
            </summary>
            <param name="list"></param>
            <returns>Instructor_PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>Instructor_PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>Instructor_PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Instructor_PromocionInfo})">
            <summary>
            Builds a Instructor_PromocionList from a IList<!--<Instructor_PromocionInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>Instructor_PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Instructor_Promocion})">
            <summary>
            Builds a Instructor_PromocionList from a IList<!--<Instructor_Promocion>-->
            </summary>
            <param name="list"></param>
            <returns>Instructor_Promocion</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_PromocionList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.CursoFormacionInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoFormacionInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.SesionList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetChildList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns>RedList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.SesionInfo})">
            <summary>
            Builds a SesionList from a IList<!--<SesionInfo>-->
            </summary>
            <param name="list"></param>
            <returns>SesionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Sesion})">
            <summary>
            Builds a SesionList from IList<!--<Sesion>-->
            </summary>
            <param name="list"></param>
            <returns>SesionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SesionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetSesionesList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SesionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SesionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetSesionesPromocionList(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>HorarioList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.SesionInfo})">
            <summary>
            Builds a SesionList from a IList<!--<SesionInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>SesionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Sesion})">
            <summary>
            Builds a SesionList from a IList<!--<Sesion>-->
            </summary>
            <param name="list"></param>
            <returns>Sesion</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Concepto_Parte">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Concepto_Parte.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Concepto_Parte.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Concepto_Parte.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PreguntaExamen">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamen.CopyValues(moleQule.Library.Instruction.PreguntaInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamen.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamen.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamen.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamen.DeleteAll">
            <summary>
            Elimina todas los PreguntaExamens
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamen.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Convocatoria_Cursos">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Resources.Enums">
            <summary>
              Clase de recurso con establecimiento inflexible de tipos, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso con establecimiento inflexible de tipos.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.EDocumentoAlumno_Documentacion">
            <summary>
              Busca una cadena traducida similar a Documentación a aportar.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.EDocumentoAlumno_Material">
            <summary>
              Busca una cadena traducida similar a Material entregado al alumno.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.EDocumentoAlumno_Matricula">
            <summary>
              Busca una cadena traducida similar a Matrícula y ficha de alumno.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.ETipoExamen_Final">
            <summary>
              Busca una cadena traducida similar a Finales.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.ETipoExamen_Parcial">
            <summary>
              Busca una cadena traducida similar a Parciales.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.ETipoPregunta_Desarrollo">
            <summary>
              Busca una cadena traducida similar a Desarrollo.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Enums.ETipoPregunta_Test">
            <summary>
              Busca una cadena traducida similar a Test.
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.EstadisticaExamen">
            <summary>
            Editable Root Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.CopyValues(moleQule.Library.Instruction.EstadisticaExamen)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.DeleteAll">
            <summary>
            Elimina todos los Area. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.#ctor(moleQule.Library.Instruction.EstadisticaExamen,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.EstadisticaExamen.GetChild(moleQule.Library.Instruction.EstadisticaExamen)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.EstadisticaExamen.GetChild(moleQule.Library.Instruction.EstadisticaExamen,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.EstadisticaExamen.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.EstadisticaExamen.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.Fetch(moleQule.Library.Instruction.EstadisticaExamen)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamen.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <member name="T:moleQule.Library.Instruction.PreguntaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaInfo.FormatImagen(System.String)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.HistoriaInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.HistoriaInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.HistoriaInfo.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataReader"/> origen de los datos</param>
            <param name="get_childs">Flag para obtener los hijos de la bd</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.HistoriaInfo.#ctor(moleQule.Library.Instruction.Historia,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="!:BusinessBaseEx"/> origen</param>
            <param name="copy_childs">Flag para copiar los hijos</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.HistoriaInfo.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.HistoriaInfo.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="T:moleQule.Library.Instruction.PlanExtraList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtraList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtraList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtraList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtraList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.PlanExtraInfo})">
            <summary>
            Builds a ClienteList from a IList<!--<ClienteInfo>-->.
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtraList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PlanExtra">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtra.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtra.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero es protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtra.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">True si se quiere que traiga los hijos</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtra.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtra.DeleteAll">
            <summary>
            Elimina todos los Clientes, Contactos de Cliente y Cuentas de Cliente
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Material_Plan">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Material_Plan.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_Plan.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_Plan.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.RevisionMaterials">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.IncidenciasCronogramas">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciasCronogramas.SELECT_SESIONES_PLAN(System.Int64)">
            <summary>
            Construye la tabla 
            Devuelve lista de sesiones de un cronograma determinado
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClasePracticaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClasePracticaInfo})">
            <summary>
            Builds a ClasePracticaList from a IList<!--<ClasePracticaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClasePractica})">
            <summary>
            Builds a ClasePracticaList from IList<!--<ClasePractica>-->
            </summary>
            <param name="list"></param>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetClasesPlanList(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetClasesOrdenadasPlanList(System.Int64,System.Int64,System.Int32)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetDisponiblesList(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetImpartidasList(System.Int64,System.DateTime,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetNoImpartidasList(System.Int64,System.Int64,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetProgramadasList(System.Int64,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClasePracticaInfo})">
            <summary>
            Builds a ClasePracticaList from a IList<!--<ClasePracticaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClasePractica})">
            <summary>
            Builds a ClasePracticaList from a IList<!--<ClasePractica>-->
            </summary>
            <param name="list"></param>
            <returns>ClasePractica</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaList.Merge(moleQule.Library.Instruction.ClasePracticaList,moleQule.Library.Instruction.ClasePracticaList)">
            <summary>
            Pega dos listas
            </summary>
            <param name="criteria">Filtro</param>
            <returns>Lista</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.TemaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.TemaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulo_Instructor_PromocionList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor_PromocionList.SELECT">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor_PromocionList.SELECT_BY_INSTRUCTOR(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Curso_Instructors">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Curso_Instructor">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Curso_Instructor.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Curso_Instructor.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Curso_Instructor.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Sesion">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion.DeleteAll">
            <summary>
            Elimina todas los Sesions
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion.SesionesSimultaneas(System.Int64,System.DateTime,System.DateTime,System.Int64,System.Int64)">
            <summary>
            Comprueba que no haya otro grupo haciendo alguna práctica incompatible con la actual en el mismo momento
            </summary>
            <param name="oid_clase"></param>
            <param name="fecha"></param>
            <param name="hora"></param>
            <param name="oid_promocion"></param>
            <param name="incompatible"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion.SELECT_SESION_BY_OID_HORARIO(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion.SELECT_SESIONES_SIMULTANEAS(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Clase_ParteInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Clase_ParteInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Horario">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.Get(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve un horario con las sesiones ordenadas 
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.DeleteAll">
            <summary>
            Elimina todas los Horarios
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.ExisteHorario(System.Int64,System.Int64,System.DateTime)">
            <summary>
            Función que comprueba si existe un horario para una promoción y fecha determinadas,
            evitando así que se intente generar otro
            </summary>
            <param name="oid_plan"></param>
            <param name="oid_promocion"></param>
            <param name="fecha_inicial"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.RellenaHorasSemana">
            <summary>
            Rellena una lista de sublistas que contienen los índices de comienzo de las clases de determinada duración
            lista[0] : 1 hora
            lista[1] : 2 horas
            lista[2] : 3 horas
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.PosibleAsignar(moleQule.Library.Instruction.ClaseTeoricaInfo,moleQule.Library.Instruction.ClaseTeoricaList)">
            <summary>
            Comprueba que sea posible asignar una clase teórica en función de las prioridades
            establecidas en el plan de estudios
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.PosibleAsignar(moleQule.Library.Instruction.ClasePracticaInfo,System.Collections.Generic.List{moleQule.Library.Instruction.ClasePracticaList})">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.PosibleAsignarModulo(moleQule.Library.Instruction.ClasePracticaInfo,moleQule.Library.Instruction.ClaseTeoricaList)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.PosibleAsignarSubodulo(moleQule.Library.Instruction.ClasePracticaInfo,moleQule.Library.Instruction.ClaseTeoricaList)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.PosibleAsignarClase(moleQule.Library.Instruction.ClasePracticaInfo,moleQule.Library.Instruction.ClaseTeoricaList)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.PosibleIntercambiar(moleQule.Library.Instruction.ClaseTeoricaInfo,moleQule.Library.Instruction.SesionAuxiliar,moleQule.Library.Instruction.InstructorInfo,moleQule.Library.Instruction.ListaSesiones,moleQule.Library.Instruction.InstructorList,System.Collections.Generic.List{moleQule.Library.Instruction.ListaSesiones},System.DateTime,System.Collections.Generic.SortedDictionary{System.Int64,moleQule.Library.Instruction.DisponibilidadInfo})">
            <summary>
            Función que comprueba si es posible realizar un intercambio de una sesión que contiene una
            clase teórica ya asignada
            </summary>
            <param name="candidata"></param>
            <param name="asignada"></param>
            <param name="prof"></param>
            <param name="lista_sesiones"></param>
            <param name="profesores"></param>
            <param name="_instructores_asignados"></param>
            <param name="fecha"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.LaboratorioLibre(moleQule.Library.Instruction.ListaSesiones,System.Collections.Generic.List{moleQule.Library.Instruction.ListaSesiones},System.Int32,System.Int64)">
            <summary>
            Función que comprueba que se pueda realizar una práctica en una sesión determinada 
            en función del campo Incompatible de la clase práctica
            </summary>
            <param name="lista_sesiones">sesiones del horario actual</param>
            <param name="_instructores_asignados">lista de horarios de la misma semana para otras promociones</param>
            <param name="index">índice de la sesión en la que se va a insertar la clase práctica</param>
            <param name="incompatible">campo Incompatible de la práctica</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.IntentaIntercambio(moleQule.Library.Instruction.ListaSesiones,System.Int32,System.Int32,moleQule.Library.Instruction.InstructorList,System.Collections.Generic.List{moleQule.Library.Instruction.ListaSesiones},System.DateTime,System.Collections.Generic.SortedDictionary{System.Int64,moleQule.Library.Instruction.DisponibilidadInfo})">
            <summary>
            Función que comprueba que se pueden intercambiar dos clases de un horario
            </summary>
            <param name="lista_sesiones">lista de las sesiones del horario actual</param>
            <param name="index1">índice de una de las clases que se pretende cambiar en la lista anterior</param>
            <param name="index2">índice de una de las clases que se pretende cambiar en la lista anterior</param>
            <param name="profesores">listado de profesores</param>
            <param name="_instructores_asignados">lista de horarios programados para la misma semana</param>
            <param name="fecha">fecha del horario actual</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.OrdenaHorario(System.Int32,moleQule.Library.Instruction.ListaSesiones,moleQule.Library.Instruction.InstructorList,System.Collections.Generic.List{moleQule.Library.Instruction.ListaSesiones},System.DateTime,System.Int64,System.Collections.Generic.SortedDictionary{System.Int64,moleQule.Library.Instruction.DisponibilidadInfo})">
            <summary>
            Función que organiza las clases asignadas a sesiones de un horario intentando que se cumplan
            las prioridades establecidas en el plan de estudios.
            No siempre será posible por la disponibilidad de los instructores.
            </summary>
            <param name="index"></param>
            <param name="lista_sesiones"></param>
            <param name="profesores"></param>
            <param name="_instructores_asignados"></param>
            <param name="fecha"></param>
            <param name="oid_promocion"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.RellenaLibres(moleQule.Library.Instruction.ClaseTeoricaList,moleQule.Library.Instruction.InstructorList,moleQule.Library.Instruction.ListaSesiones,System.Collections.Generic.List{moleQule.Library.Instruction.ListaSesiones},System.DateTime,System.Collections.Generic.List{moleQule.Library.Instruction.SesionNoAsignable},System.Int64,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Decimal,moleQule.Library.Instruction.ProfesoresModulos,System.Collections.Generic.SortedDictionary{System.Int64,moleQule.Library.Instruction.DisponibilidadInfo})">
            <summary>
            Función que rellena los huecos que quedan aún sin asignar en el horario, intentando forzar clases
            y profesores suplentes
            </summary>
            <param name="_teoria"></param>
            <param name="profesores"></param>
            <param name="lista_sesiones"></param>
            <param name="_instructores_asignados"></param>
            <param name="fecha"></param>
            <param name="no_asignables"></param>
            <param name="oid_promocion"></param>
            <param name="lista_3"></param>
            <param name="lista_2"></param>
            <param name="dias_suplente"></param>
            <param name="profesores_encargados"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.LiberarClase(System.Int32,moleQule.Library.Instruction.ListaSesiones,System.Collections.Generic.List{moleQule.Library.Instruction.ClasePracticaList},moleQule.Library.Instruction.ClaseTeoricaList,moleQule.Library.Instruction.ClaseExtraList)">
            <summary>
            Marca como libre en la lista de clases, la clase que estaba asignada en la sesión que está en el índice index
            </summary>
            <param name="index">índice de la sesión actual</param>
            <param name="lista_sesiones">lista de sesiones del horario actual</param>
            <param name="_practicas">lista de clases prácticas que aún no se han asignado a la promoción actual</param>
            <param name="_teoria">lista de clases teóricas que aún no se han asignado a la promoción actual</param>
            <param name="_extra">lista de clases extra que aún no se han asignado a la promoción actual</param>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.ObtieneNombreModulo(System.Int64,System.Int64,moleQule.Library.Instruction.ClaseTeoricaList,System.Collections.Generic.List{moleQule.Library.Instruction.ClasePracticaList},moleQule.Library.Instruction.ClaseExtraList,moleQule.Library.Instruction.ModuloList)">
            <summary>
            Función que devuelve el nombre del módulo a la que pertenece una clase a partir del
            Oid y el tipo de la misma
            </summary>
            <param name="oid"></param>
            <param name="tipo"></param>
            <param name="teoricas"></param>
            <param name="practicas"></param>
            <param name="extras"></param>
            <param name="modulos"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.MuestraSesiones(moleQule.Library.Instruction.Sesions,moleQule.Library.Instruction.ListaSesiones,moleQule.Library.Instruction.ClaseTeoricaList,moleQule.Library.Instruction.ClasePracticaList,moleQule.Library.Instruction.ClaseExtraList)">
            <summary>
            Rellena la lista auxiliar de sesiones necesaria para la configuración del horario.
            Esta lista contiene más datos que una lista de sesiones básica.
            </summary>
            <param name="lista_sesiones"> clases asignadas</param>
            <param name="teoricas"></param>
            <param name="practicas"></param>
            <param name="extras"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.MuestraSesiones(moleQule.Library.Instruction.SesionList,moleQule.Library.Instruction.ListaSesiones,moleQule.Library.Instruction.ClaseTeoricaList,moleQule.Library.Instruction.ClasePracticaList,moleQule.Library.Instruction.ClaseExtraList)">
            <summary>
            Rellena la lista auxiliar de sesiones necesaria para la configuración del horario.
            Esta lista contiene más datos que una lista de sesiones básica.
            </summary>
            <param name="lista_sesiones"> clases asignadas</param>
            <param name="teoricas"></param>
            <param name="practicas"></param>
            <param name="extras"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Horario.SELECT_BY_PLAN_BY_PROMOCION(System.Int64,System.Int64,System.DateTime)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.HorarioController">
            <summary>
            Editable Root Business Object With Editable Child Collection
            Editable Child Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.InstructorInicialModulo(moleQule.Library.Instruction.ClaseTeoricaInfo,System.Int64,System.Int64)">
            <summary>
            Función que comprueba que el instructor que ha comenzado a impartir un módulo sea
            quien lo continúa impartiendo
            </summary>
            <param name="clase"></param>
            <param name="prioridad"></param>
            <param name="oid_instructor"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.LaboratorioLibre(System.Int32,System.Int64,System.Int32)">
            <summary>
            Función que comprueba que se pueda realizar una práctica en una sesión determinada 
            en función del campo Incompatible de la clase práctica
            </summary>
            <param name="lista_sesiones">sesiones del horario actual</param>
            <param name="_instructores_asignados">lista de horarios de la misma semana para otras promociones</param>
            <param name="index">índice de la sesión en la que se va a insertar la clase práctica</param>
            <param name="incompatible">campo Incompatible de la práctica</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.MismaInstructorMismaSesion(System.Int32,System.Int64)">
            <summary>
            Comprueba que un mismo instructor no tenga clase en la misma sesión dos días seguidos
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.MismoInstructorMismoDia(System.Int32,System.Int64)">
            <summary>
            Comprueba que no se impartan varias sesiones del mismo módulo el mismo día
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.MismoModuloMismoDia(System.Int32,moleQule.Library.Instruction.ClaseTeoricaInfo)">
            <summary>
            Comprueba que no se impartan varias sesiones del mismo módulo el mismo día
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.PosibleAsignarModulo(moleQule.Library.Instruction.ClasePracticaInfo)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.PosibleAsignarSubmodulo(moleQule.Library.Instruction.ClasePracticaInfo)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.PosibleAsignarPracticaHorario(moleQule.Library.Instruction.ClasePracticaInfo)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las clases
            teóricas programadas hasta el momento en el horario actual
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.PosibleAsignarPracticaHorariosAnteriores(moleQule.Library.Instruction.ClasePracticaInfo)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las clases
            teóricas programadas hasta el momento en el horario actual
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.PosibleAsignarClase(moleQule.Library.Instruction.ClasePracticaInfo)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.QuedanClasesSubmodulo(moleQule.Library.Instruction.ClaseTeoricaInfo,System.Int32,System.Int32@)">
            <summary>
            Comprueba que queden clases del mismo submódulo por impartir para rellenar el hueco con el 
            número de horas de la sesión
            </summary>
            <param name="clase"></param>
            <param name="n_horas"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.PosibleIntercambiar(moleQule.Library.Instruction.ClaseTeoricaInfo,moleQule.Library.Instruction.SesionAuxiliar,moleQule.Library.Instruction.InstructorInfo,System.DateTime)">
            <summary>
            Función que comprueba si es posible realizar un intercambio de una sesión que contiene una
            clase teórica ya asignada
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.IntentaIntercambio(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Función que comprueba que se pueden intercambiar dos clases de un horario
            </summary>
            <param name="index1">índice de una de las clases que se pretende cambiar en la lista anterior</param>
            <param name="index2">índice de una de las clases que se pretende cambiar en la lista anterior</param>
            <param name="fecha">fecha del horario actual</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.OrdenaHorario(System.Int32)">
            <summary>
            Función que organiza las clases asignadas a sesiones de un horario intentando que se cumplan
            las prioridades establecidas en el plan de estudios.
            No siempre será posible por la disponibilidad de los instructores.
            </summary>
            <param name="index"></param>
            <param name="lista_sesiones"></param>
            <param name="profesores"></param>
            <param name="_instructores_asignados"></param>
            <param name="fecha"></param>
            <param name="oid_promocion"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.RellenaLibres(System.Collections.Generic.List{moleQule.Library.Instruction.SesionNoAsignable})">
            <summary>
            Función que rellena los huecos que quedan aún sin asignar en el horario, intentando forzar clases
            y profesores suplentes
            </summary>
            <param name="_teoria"></param>
            <param name="profesores"></param>
            <param name="lista_sesiones"></param>
            <param name="_instructores_asignados"></param>
            <param name="fecha"></param>
            <param name="no_asignables"></param>
            <param name="oid_promocion"></param>
            <param name="lista_3"></param>
            <param name="lista_2"></param>
            <param name="dias_suplente"></param>
            <param name="profesores_encargados"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.ObtieneNombreModulo(System.Int64,System.Int64,moleQule.Library.Instruction.ModuloList)">
            <summary>
            Función que devuelve el nombre del módulo a la que pertenece una clase a partir del
            Oid y el tipo de la misma
            </summary>
            <param name="oid"></param>
            <param name="tipo"></param>
            <param name="teoricas"></param>
            <param name="practicas"></param>
            <param name="extras"></param>
            <param name="modulos"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioController.LiberarClase(System.Int32)">
            <summary>
            Marca como libre en la lista de clases, la clase que estaba asignada en la sesión que está en el índice index
            </summary>
            <param name="index">índice de la sesión actual</param>
            <param name="lista_sesiones">lista de sesiones del horario actual</param>
            <param name="_practicas">lista de clases prácticas que aún no se han asignado a la promoción actual</param>
            <param name="_teoria">lista de clases teóricas que aún no se han asignado a la promoción actual</param>
            <param name="_extra">lista de clases extra que aún no se han asignado a la promoción actual</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Festivo">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.AddBusinessRules">
            <summary>
            Añade las reglas de validación necesarias para el objeto
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.#ctor(moleQule.Library.Instruction.Festivo,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.Festivo.GetChild(moleQule.Library.Instruction.Festivo)" -->
        <member name="M:moleQule.Library.Instruction.Festivo.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.New">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.DeleteAll">
            <summary>
            Elimina todos los Festivo. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.Save">
            <summary>
            Guarda en la base de datos todos los cambios del objeto.
            También guarda los cambios de los hijos si los tiene
            </summary>
            <returns>Objeto actualizado y con los flags reseteados</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.DataPortal_Create(moleQule.Library.CslaEx.BusinessBaseEx{moleQule.Library.Instruction.Festivo}.CriteriaCs)">
            <summary>
            Crea un objeto
            </summary>
            <param name="criteria">Criterios de consulta</param>
            <remarks>La llama el DataPortal a partir del New o NewChild</remarks>		
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.Fetch(moleQule.Library.Instruction.Festivo)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.Festivo.Insert(moleQule.Library.Instruction.Festivos)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.Festivo.Update(moleQule.Library.Instruction.Festivos)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.Festivo.DeleteSelf(moleQule.Library.Instruction.Festivos)" -->
        <member name="M:moleQule.Library.Instruction.Festivo.DataPortal_Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Obtiene un registro de la base de datos
            </summary>
            <param name="criteria">Criterios de consulta</param>
            <remarks>Lo llama el DataPortal tras generar el objeto</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.DataPortal_Insert">
            <summary>
            Inserta un elemento en la tabla
            </summary>
            <remarks>Lo llama el DataPortal cuando se llama al Save y el objeto isNew</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.DataPortal_Update">
            <summary>
            Modifica un elemento en la tabla
            </summary>
            <remarks>Lo llama el DataPortal cuando se llama al Save y el objeto isDirty</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.DataPortal_DeleteSelf">
            <summary>
            Borrado aplazado, no se ejecuta hasta que se llama al Save
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivo.DataPortal_Delete(moleQule.Library.CslaEx.BusinessBaseEx{moleQule.Library.Instruction.Festivo}.CriteriaCs)">
            <summary>
            Elimina un elemento en la tabla
            </summary>
            <remarks>Lo llama el DataPortal</remarks>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_Examens">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_Examen">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Examen.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Examen.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Examen.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Examen.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Examen.DeleteAll">
            <summary>
            Elimina todas los Submodulos
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RegistroFaltasList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.RegistroFaltasInfo})">
            <summary>
            Builds a RegistroFaltasList from a IList<!--<RegistroFaltasInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.RegistroFaltas})">
            <summary>
            Builds a RegistroFaltasList from a IList<!--<RegistroFaltas>-->
            </summary>
            <param name="list"></param>
            <returns>RegistroFaltasList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Promocions">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Preguntas_PlantillaInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas_PlantillaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PlantillaExamenList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.PlantillaExamenInfo})">
            <summary>
            Builds a PlantillaExamenList from a IList<!--<PlantillaExamenInfo>-->
            </summary>
            <param name="list"></param>
            <returns>PlantillaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.PlantillaExamen})">
            <summary>
            Builds a PlantillaExamenList from IList<!--<PlantillaExamen>-->
            </summary>
            <param name="list"></param>
            <returns>PlantillaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PlantillaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetListByModulo(System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PlantillaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PlantillaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.PlantillaExamenInfo})">
            <summary>
            Builds a PlantillaExamenList from a IList<!--<PlantillaExamenInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>PlantillaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.PlantillaExamen})">
            <summary>
            Builds a PlantillaExamenList from a IList<!--<PlantillaExamen>-->
            </summary>
            <param name="list"></param>
            <returns>PlantillaExamen</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.Fetch(System.Collections.Generic.IList{moleQule.Library.Instruction.PlantillaExamen})">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.GetPlantillasFiltradas(System.Int64,System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenList.SELECT_PLANTILLAS_FILTRADAS(System.Int64,System.String,System.Boolean,System.Boolean)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PlanExtraInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtraInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtraInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanExtraInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseExtraList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseExtraInfo})">
            <summary>
            Builds a ClaseExtraList from a IList<!--<ClaseExtraInfo>-->
            </summary>
            <param name="list"></param>
            <returns>ClaseExtraList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseExtra})">
            <summary>
            Builds a ClaseExtraList from IList<!--<ClaseExtra>-->
            </summary>
            <param name="list"></param>
            <returns>ClaseExtraList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseExtraList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetDisponiblesList(System.Int64,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseExtraList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetClasesPlanList(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClasePracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseExtraInfo})">
            <summary>
            Builds a ClaseExtraList from a IList<!--<ClaseExtraInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>ClaseExtraList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseExtra})">
            <summary>
            Builds a ClaseExtraList from a IList<!--<ClaseExtra>-->
            </summary>
            <param name="list"></param>
            <returns>ClaseExtra</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseExtra">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtra.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtra.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtra.DeleteAll">
            <summary>
            Elimina todas los ClaseExtras
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtra.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.CronogramaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaInfo.Get(System.Data.IDataReader)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseTeoricas">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_PromocionList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_PromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_PromocionInfo})">
            <summary>
            Builds a Alumno_PromocionList from a IList<!--<Alumno_PromocionInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_PromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_Promocion})">
            <summary>
            Builds a Alumno_PromocionList from IList<!--<Alumno_Promocion>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_PromocionList.GetListaAdmitidos(System.Int64,System.DateTime,System.Collections.Generic.Dictionary{System.String,moleQule.Library.Instruction.PromocionInfo},System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_Practica">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Practica.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Practica.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Practica.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Resources.Defaults">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.ALUMNO_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 00000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.CONVOCATORIA_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 00000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.CURSO_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.DEFAULT_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 00000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.DISPONIBILIDAD_DIA_VALUE">
            <summary>
              Looks up a localized string similar to D.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.DISPONIBILIDAD_MANANA_VALUE">
            <summary>
              Looks up a localized string similar to M.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.DISPONIBILIDAD_NO_DISPONIBLE_VALUE">
            <summary>
              Looks up a localized string similar to -.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.DISPONIBILIDAD_TARDE_VALUE">
            <summary>
              Looks up a localized string similar to T.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.DISPONIBILIDAD_TARDE1_VALUE">
            <summary>
              Looks up a localized string similar to T1.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.DISPONIBILIDAD_TARDE2_VALUE">
            <summary>
              Looks up a localized string similar to T2.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.EMPLEADO_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.MODULO_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.NO_DISPONIBILIDAD_VALUE">
            <summary>
              Looks up a localized string similar to ND.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.PLANTILLA_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.PREGUNTA_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 00000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.PREGUNTA_EXAMEN_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 000000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.RESPUESTA_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 000000.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Defaults.SUBMODULO_CODE_FORMAT">
            <summary>
              Looks up a localized string similar to 000.
            </summary>
        </member>
        <member name="F:moleQule.Library.Instruction.ModuleController._main">
            <summary>
            Única instancia de la clase ControlerBase (Singleton)
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuleController.#ctor">
            <summary>
            Contructor 
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.ModuleController.Instance">
            <summary>
            Unique Controler Class Instance
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RegistroDisponibilidadList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadList.GetList(System.DateTime,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadList.GetList(System.DateTime)">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.RegistroDisponibilidadInfo})">
            <summary>
            Builds a RegistroDisponibilidadList from a IList<!--<RegistroDisponibilidadInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadList.GetSortedList(System.DateTime,System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadList.GetSortedList(System.DateTime,System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.RegistroDisponibilidad})">
            <summary>
            Builds a RegistroDisponibilidadList from a IList<!--<RegistroDisponibilidad>-->
            </summary>
            <param name="list"></param>
            <returns>RegistroDisponibilidadList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PromocionList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.AddEmptyItem">
            <summary>
            Añade un elemento en blanco para que funcionen los combobox
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.PromocionInfo})">
            <summary>
            Builds a PromocionList from a IList<!--<PromocionInfo>-->
            </summary>
            <param name="list"></param>
            <returns>PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Promocion})">
            <summary>
            Builds a PromocionList from IList<!--<Promocion>-->
            </summary>
            <param name="list"></param>
            <returns>PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetByModuloList(System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.PromocionInfo})">
            <summary>
            Builds a PromocionList from a IList<!--<PromocionInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>PromocionList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Promocion})">
            <summary>
            Builds a PromocionList from a IList<!--<Promocion>-->
            </summary>
            <param name="list"></param>
            <returns>Promocion</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionList.Fetch(System.Collections.Generic.IList{moleQule.Library.Instruction.Promocion})">
            <summary>
            Obtiene el objeto a partir de la lista clave-valor
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.RespuestaList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.RespuestaInfo})">
            <summary>
            Builds a RespuestaList from a IList<!--<RespuestaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>RespuestaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaList.GetModuloList(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Respuesta})">
            <summary>
            Builds a RespuestaList from IList<!--<Respuesta>-->
            </summary>
            <param name="list"></param>
            <returns>RespuestaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaList.FormatCodigoList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>RespuestaList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseExtraInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseExtraInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Material_PlanList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_PlanList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Material_PlanInfo})">
            <summary>
            Builds a Material_PlanList from a IList<!--<Material_PlanInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Material_PlanList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_PlanList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Material_Plan})">
            <summary>
            Builds a Material_PlanList from IList<!--<Material_Plan>-->
            </summary>
            <param name="list"></param>
            <returns>Material_PlanList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseTeoricaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseTeoricaInfo})">
            <summary>
            Builds a ClaseTeoricaList from a IList<!--<ClaseTeoricaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseTeorica})">
            <summary>
            Builds a ClaseTeoricaList from IList<!--<ClaseTeorica>-->
            </summary>
            <param name="list"></param>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetClasesOrdenadasPlanList(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetClasesPlanList(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetImpartidasList(System.Int64,System.DateTime)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetNoImpartidasList(System.Int64,System.Int64,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetDisponiblesList(System.Int64,System.Int64,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetProgramadasList(System.Int64,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseTeoricaInfo})">
            <summary>
            Builds a ClaseTeoricaList from a IList<!--<ClaseTeoricaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>ClaseTeoricaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseTeorica})">
            <summary>
            Builds a ClaseTeoricaList from a IList<!--<ClaseTeorica>-->
            </summary>
            <param name="list"></param>
            <returns>ClaseTeorica</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClasePracticaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulo_Instructor_PromocionInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor_PromocionInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor_PromocionPrint.CopyValues(moleQule.Library.Instruction.Submodulo_Instructor_PromocionInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Instructores">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.CursoFormacions">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.ParteAsistenciaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ParteAsistenciaInfo})">
            <summary>
            Builds a ParteAsistenciaList from a IList<!--<ParteAsistenciaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>ParteAsistenciaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ParteAsistencia})">
            <summary>
            Builds a ParteAsistenciaList from IList<!--<ParteAsistencia>-->
            </summary>
            <param name="list"></param>
            <returns>ParteAsistenciaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ParteAsistenciaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ParteAsistenciaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ParteAsistenciaInfo})">
            <summary>
            Builds a ParteAsistenciaList from a IList<!--<ParteAsistenciaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>ParteAsistenciaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ParteAsistencia})">
            <summary>
            Builds a ParteAsistenciaList from a IList<!--<ParteAsistencia>-->
            </summary>
            <param name="list"></param>
            <returns>ParteAsistencia</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetPracticasList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ParteAsistenciaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetByPromocion(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="oid_promocion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaList.GetPartesFiltrados(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PreguntaExamenInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenInfo.CopyValues(moleQule.Library.Instruction.PreguntaInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenInfo.FormatImagen(System.String)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenPrint.CopyValues(moleQule.Library.Instruction.PreguntaExamenInfo,moleQule.Library.Instruction.Preguntas)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenPrint.CopyValues(moleQule.Library.Instruction.PreguntaExamenInfo,moleQule.Library.Instruction.PreguntaList)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.ExamenList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ExamenInfo})">
            <summary>
            Builds a ExamenList from a IList<!--<ExamenInfo>-->
            </summary>
            <param name="list"></param>
            <returns>ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Examen})">
            <summary>
            Builds a ExamenList from IList<!--<Examen>-->
            </summary>
            <param name="list"></param>
            <returns>ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetFechaList(System.DateTime)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetEmitidosList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetComboAlumno_ExamenList(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ExamenInfo})">
            <summary>
            Builds a ExamenList from a IList<!--<ExamenInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Examen})">
            <summary>
            Builds a ExamenList from a IList<!--<Examen>-->
            </summary>
            <param name="list"></param>
            <returns>Examen</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetModuloList(System.Int64)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.FormatCodigoList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>RespuestaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.GetExamenesFiltrados(System.Int64,System.Int64,System.Int64,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.String)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenList.SELECT_EXAMENES_FILTRADOS(System.Int64,System.Int64,System.Int64,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.String)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_Promocion">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Promocion.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Promocion.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Promocion.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_Convocatoria">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Convocatoria.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Convocatoria.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Convocatoria.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.RegistroFaltasInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasInfo.CopyValues(moleQule.Library.Instruction.RegistroFaltas)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasInfo.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasInfo.#ctor(moleQule.Library.Instruction.RegistroFaltas)">
            <summary>
            Contructor de AreaInfo a partir de un Area
            No copia los hijos
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasInfo.Get(System.Int64)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltasInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.InformePlantillaList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetList(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetDisponiblesList(System.Int64,System.DateTime)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetDisponiblesDesarrolloList(System.Int64,System.DateTime)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.InformePlantillaInfo})">
            <summary>
            Builds a InformePlantillaList from a IList<!--<InformePlantillaInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.InformePlantilla})">
            <summary>
            Builds a InformePlantillaList from a IList<!--<InformePlantilla>-->
            </summary>
            <param name="list"></param>
            <returns>InformePlantillaList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Sesiones_Promociones">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaPrint.CopyValues(moleQule.Library.Instruction.PreguntaInfo,System.Int32)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Pregunta">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.CopyFrom(moleQule.Library.Instruction.PreguntaExamenInfo)">
            Copia los atributos del objeto
            <summary>        
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.GetNewCode">
            <summary>
            Devuelve el siguiente código de Módulo.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.GetNewSerial">
            <summary>
            Devuelve el siguiente Serial de Alumno.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.DeleteAll">
            <summary>
            Elimina todas los Preguntas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta.SELECT(System.String,System.Int64)">
            <summary>
            Construye un SELECT para el esquema dado
            </summary>
            <param name="schema"></param>
            <param name="sesion">sesión abierta para la transacción</param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PlantillaExamenInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenInfo.#ctor(moleQule.Library.Instruction.PlantillaExamen,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="!:BusinessBaseEx"/> origen</param>
            <param name="copy_childs">Flag para copiar los hijos</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PlantillaExamen">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamen.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamen.GetNewCode">
            <summary>
            Devuelve el siguiente código de Cliente.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamen.GetNewSerial">
            <summary>
            Devuelve el siguiente Serial de PlantillaExamen.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamen.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamen.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamen.DeleteAll">
            <summary>
            Elimina todas los PlantillaExamens
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamen.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Material_AlumnoList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_AlumnoList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Material_AlumnoInfo})">
            <summary>
            Builds a Material_AlumnoList from a IList<!--<Material_AlumnoInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Material_AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_AlumnoList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Material_Alumno})">
            <summary>
            Builds a Material_AlumnoList from IList<!--<Material_Alumno>-->
            </summary>
            <param name="list"></param>
            <returns>Material_AlumnoList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.SesionesCronogramas">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionesCronogramas.SELECT_SESIONES_PLAN(System.Int64)">
            <summary>
            Construye la tabla 
            Devuelve lista de sesiones de un cronograma determinado
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Cronogramas">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Tema">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Tema.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Tema.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Tema.DeleteAll">
            <summary>
            Elimina todas los Temas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Tema.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.InstructorInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorPrint.CopyValues(moleQule.Library.Instruction.InstructorInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioPrint.CopyValues(moleQule.Library.Instruction.HorarioInfo,moleQule.Library.Instruction.InstructorList,moleQule.Library.Instruction.ModuloList)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.PreguntaExamenList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.PreguntaExamenInfo})">
            <summary>
            Builds a PreguntaExamenList from a IList<!--<PreguntaExamenInfo>-->
            </summary>
            <param name="list"></param>
            <returns>PreguntaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.PreguntaExamen})">
            <summary>
            Builds a PreguntaExamenList from IList<!--<PreguntaExamen>-->
            </summary>
            <param name="list"></param>
            <returns>PreguntaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>PreguntaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.PreguntaExamenInfo})">
            <summary>
            Builds a PreguntaExamenList from a IList<!--<PreguntaExamenInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>PreguntaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.PreguntaExamen})">
            <summary>
            Builds a PreguntaExamenList from a IList<!--<PreguntaExamen>-->
            </summary>
            <param name="list"></param>
            <returns>PreguntaExamen</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PreguntaExamenList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumnos_Promociones">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_PromocionInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_PromocionInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_Convocatorias">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoCursos">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RegistroDisponibilidadInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadInfo.CopyValues(moleQule.Library.Instruction.RegistroDisponibilidad)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadInfo.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadInfo.#ctor(moleQule.Library.Instruction.RegistroDisponibilidad)">
            <summary>
            Contructor de AreaInfo a partir de un Area
            No copia los hijos
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadInfo.Get(System.Int64)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidadInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseGenericaList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaList.GetList(moleQule.Library.Instruction.ClaseTeoricaList,moleQule.Library.Instruction.ClasePracticaList,moleQule.Library.Instruction.ClaseExtraList)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseGenericaInfo})">
            <summary>
            Builds a ClaseGenericaList from a IList<!--<ClaseGenericaInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ClaseGenerica})">
            <summary>
            Builds a ClaseGenericaList from a IList<!--<ClaseGenerica>-->
            </summary>
            <param name="list"></param>
            <returns>ClaseGenericaList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PromocionInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PromocionInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.RespuestaInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HistoriaPrint.CopyValues(moleQule.Library.Instruction.HistoriaInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Material_PlanInfo">
            <summary>
            ReadOnly Child Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_PlanInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_PlanInfo.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataReader"/> origen de los datos</param>
            <param name="get_childs">Flag para obtener los hijos de la bd</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_PlanInfo.#ctor(moleQule.Library.Instruction.Material_Plan,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="!:BusinessBaseEx"/> origen</param>
            <param name="copy_childs">Flag para copiar los hijos</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.Material_PlanInfo.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.Material_PlanInfo.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.Material_PlanInfo.Fetch(System.Data.IDataReader)">
            <summary>
            Obtiene un objeto a partir de un <see cref="T:System.Data.IDataReader"/>.
            Obtiene los hijos si los tiene y se solicitan
            </summary>
            <param name="criteria"><see cref="T:System.Data.IDataReader"/> con los datos</param>
            <remarks>
            La utiliza el <see cref="!:ReadOnlyListBaseEx"/> correspondiente para construir los objetos de la lista
            </remarks>
        </member>
        <member name="T:moleQule.Library.Instruction.SesionCronogramaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetChildList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns>RedList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.SesionCronogramaInfo})">
            <summary>
            Builds a SesionCronogramaList from a IList<!--<SesionCronogramaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>SesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.SesionCronograma})">
            <summary>
            Builds a SesionCronogramaList from IList<!--<SesionCronograma>-->
            </summary>
            <param name="list"></param>
            <returns>SesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.SesionCronogramaInfo})">
            <summary>
            Builds a SesionCronogramaList from a IList<!--<SesionCronogramaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>SesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.SesionCronograma})">
            <summary>
            Builds a SesionCronogramaList from a IList<!--<SesionCronograma>-->
            </summary>
            <param name="list"></param>
            <returns>SesionCronograma</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.IncidenciaSesionCronogramaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetChildList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns>RedList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.IncidenciaSesionCronogramaInfo})">
            <summary>
            Builds a IncidenciaSesionCronogramaList from a IList<!--<IncidenciaSesionCronogramaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>IncidenciaSesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.IncidenciaSesionCronograma})">
            <summary>
            Builds a IncidenciaSesionCronogramaList from IList<!--<IncidenciaSesionCronograma>-->
            </summary>
            <param name="list"></param>
            <returns>IncidenciaSesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>IncidenciaSesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>IncidenciaSesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.IncidenciaSesionCronogramaInfo})">
            <summary>
            Builds a IncidenciaSesionCronogramaList from a IList<!--<IncidenciaSesionCronogramaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>IncidenciaSesionCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.IncidenciaSesionCronograma})">
            <summary>
            Builds a IncidenciaSesionCronogramaList from a IList<!--<IncidenciaSesionCronograma>-->
            </summary>
            <param name="list"></param>
            <returns>IncidenciaSesionCronograma</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseTeoricaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseTeoricaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ClasePractica">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePractica.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePractica.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePractica.DeleteAll">
            <summary>
            Elimina todas los ClasePracticas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePractica.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Temas">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Temas.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ModuloList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloList.GetListByPromocion(System.Boolean,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloList.GetOrderedList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.ModuloInfo})">
            <summary>
            Builds a ClienteList from a IList<!--<ClienteInfo>-->.
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloList.SELECT_ORDERED(System.String)">
            <summary>
            Construye el SELECT de la lista y lo ejecuta
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulos_Instructores">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.InstructorList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.GetInstructoresHorariosList(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.InstructorInfo})">
            <summary>
            Builds a ClienteList from a IList<!--<ClienteInfo>-->.
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.GetListaCapacitados(System.Int64,System.Int64)">
            <summary>
            Función que devuelve una lista de sólo lectura de los instructores con capacidad
            para dar un submódulo concreto a la promoción que se indica
            </summary>
            <param name="oid_submodulo"></param>
            <param name="oid_promocion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.EstaDisponible(System.Int64,System.Int32,System.DateTime)">
            <summary>
            Comprueba la disponibilidad de un profesor para una fecha y hora determinadas en base a 
            la disponibilidad que éste habrá rellenado previamente
            </summary>
            <param name="oid_instructor"></param>
            <param name="index"></param>
            <param name="profesores"></param>
            <param name="fecha"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.SELECT_INNER_JOIN_HORARIOS(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InstructorList.SELECT">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ParteAsistenciaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistenciaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Festivos">
            <summary>
            Editable Business Object Root Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivos.NewItem">
            <summary>
            Crea y añade un nuevo elemento a la lista principal
            El elemento SE CREARA en la tabla correspondiente cuando se guarde la lista
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivos.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivos.NewList">
            <summary>
            Crea una nueva lista vacía
            </summary>
            <returns>Lista vacía</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivos.DataPortal_Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
            <remarks>LA UTILIZA EL DATAPORTAL</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivos.Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
        </member>
        <member name="M:moleQule.Library.Instruction.Festivos.DataPortal_Update">
            <summary>
            Realiza el Save de los objetos de la lista. Inserta, Actualiza o Borra en función
            de los flags de cada objeto de la lista
            </summary>
            <param name="reader">IDataReader origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Pregunta_Examens">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.ExamenPromocion">
            <summary>
            Editable Child Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.AddBusinessRules">
            <summary>
            Añade las reglas de validación necesarias para el objeto
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            Debe ser public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.#ctor(moleQule.Library.Instruction.ExamenPromocion,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ExamenPromocion.GetChild(moleQule.Library.Instruction.ExamenPromocion)" -->
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.#ctor(moleQule.Library.Instruction.Examen)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LO UTILIZA LA FUNCION DE CREACION DE LA LISTA DEL PADRE
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.NewChild(moleQule.Library.Instruction.Examen)">
            <summary>
            Crea un nuevo objeto hijo
            </summary>
            <param name="parent">Objeto padre</param>
            <returns>Nuevo objeto creado</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre, que
            debe utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.DataPortal_Create(moleQule.Library.CslaEx.BusinessBaseEx{moleQule.Library.Instruction.ExamenPromocion}.CriteriaCs)">
            <summary>
            Crea un objeto
            </summary>
            <param name="criteria">Criterios de consulta</param>
            <remarks>La llama el DataPortal a partir del New o NewChild</remarks>		
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.Fetch(moleQule.Library.Instruction.ExamenPromocion)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ExamenPromocion.Insert(moleQule.Library.Instruction.ExamenPromociones)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ExamenPromocion.Update(moleQule.Library.Instruction.ExamenPromociones)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ExamenPromocion.DeleteSelf(moleQule.Library.Instruction.ExamenPromociones)" -->
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.Insert(moleQule.Library.Instruction.Examen)">
            <summary>
            Inserta un registro en la base de datos
            </summary>
            <param name="parent">Objeto padre</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocion.Update(moleQule.Library.Instruction.Examen)">
            <summary>
            Actualiza un registro en la base de datos
            </summary>
            <param name="parent">Objeto padre</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ExamenPromocion.DeleteSelf(moleQule.Library.Instruction.Examen)" -->
        <member name="T:moleQule.Library.Instruction.ExamenInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenInfo.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataReader"/> origen de los datos</param>
            <param name="get_childs">Flag para obtener los hijos de la bd</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenInfo.#ctor(moleQule.Library.Instruction.Examen,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="!:BusinessBaseEx"/> origen</param>
            <param name="copy_childs">Flag para copiar los hijos</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ExamenInfo.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ExamenInfo.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.ExamenInfo.Get(System.Int64)">
            <summary>
            Obtiene un <see cref="!:ReadOnlyBaseEx"/> de la base de datos
            </summary>
            <param name="oid">Oid del objeto</param>
            <returns>Objeto <see cref="!:ReadOnlyBaseEx"/> construido a partir del registro</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Obtiene un <see cref="!:ReadOnlyBaseEx"/> de la base de datos
            </summary>
            <param name="oid">Oid del objeto</param>
            <param name="get_childs">Flag para obtener los hijos de la bd</param>
            <returns>Objeto <see cref="!:ReadOnlyBaseEx"/> construido a partir del registro</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenInfo.DataPortal_Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Obtiene un registro de la base de datos
            </summary>
            <param name="criteria"><see cref="T:moleQule.Library.CslaEx.CriteriaEx"/> con los criterios</param>
            <remarks>
            La llama el DataPortal
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenInfo.Fetch(System.Data.IDataReader)">
            <summary>
            Obtiene un objeto a partir de un <see cref="T:System.Data.IDataReader"/>.
            Obtiene los hijos si los tiene y se solicitan
            </summary>
            <param name="criteria"><see cref="T:System.Data.IDataReader"/> con los datos</param>
            <remarks>
            La utiliza el <see cref="!:ReadOnlyListBaseEx"/> correspondiente para construir los objetos de la lista
            </remarks>
        </member>
        <member name="T:moleQule.Library.Instruction.Examen">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Examen.GetNewSerial">
            <summary>
            Devuelve el siguiente Numero de Examen
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Examen.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Examen.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Examen.DeleteAll">
            <summary>
            Elimina todas los Examens
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Examen.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumnos_Practicas">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RegistroFaltas">
            <summary>
            Editable Root Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.CopyValues(moleQule.Library.Instruction.RegistroFaltas)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.DeleteAll">
            <summary>
            Elimina todos los Area. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.#ctor(moleQule.Library.Instruction.RegistroFaltas,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.RegistroFaltas.GetChild(moleQule.Library.Instruction.RegistroFaltas)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.RegistroFaltas.GetChild(moleQule.Library.Instruction.RegistroFaltas,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.RegistroFaltas.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.RegistroFaltas.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.Fetch(moleQule.Library.Instruction.RegistroFaltas)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroFaltas.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <member name="T:moleQule.Library.Instruction.InformePlantillaInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaInfo.CopyValues(moleQule.Library.Instruction.InformePlantilla)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaInfo.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaInfo.#ctor(moleQule.Library.Instruction.InformePlantilla)">
            <summary>
            Contructor de AreaInfo a partir de un Area
            No copia los hijos
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaInfo.Get(System.Int64)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantillaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.InformePlantilla">
            <summary>
            Editable Root Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.CopyValues(moleQule.Library.Instruction.InformePlantilla)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.DeleteAll">
            <summary>
            Elimina todos los Area. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.#ctor(moleQule.Library.Instruction.InformePlantilla,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.InformePlantilla.GetChild(moleQule.Library.Instruction.InformePlantilla)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.InformePlantilla.GetChild(moleQule.Library.Instruction.InformePlantilla,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.InformePlantilla.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.InformePlantilla.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.InformePlantilla.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.Fetch(moleQule.Library.Instruction.InformePlantilla)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePlantilla.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <member name="T:moleQule.Library.Instruction.PlantillaExamenes">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenes.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlantillaExamenes.GetModuloList(System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.RevisionMaterialList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.RevisionMaterialInfo})">
            <summary>
            Builds a RevisionMaterialList from a IList<!--<RevisionMaterialInfo>-->
            </summary>
            <param name="list"></param>
            <returns>RevisionMaterialList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.RevisionMaterial})">
            <summary>
            Builds a RevisionMaterialList from IList<!--<RevisionMaterial>-->
            </summary>
            <param name="list"></param>
            <returns>RevisionMaterialList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>RevisionMaterialList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>RevisionMaterialList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.RevisionMaterialInfo})">
            <summary>
            Builds a RevisionMaterialList from a IList<!--<RevisionMaterialInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>RevisionMaterialList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.RevisionMaterial})">
            <summary>
            Builds a RevisionMaterialList from a IList<!--<RevisionMaterial>-->
            </summary>
            <param name="list"></param>
            <returns>RevisionMaterial</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Material_AlumnoInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_AlumnoInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.MaterialDocentes">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.IncidenciaSesionCronogramaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronogramaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Cronograma">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Cronograma.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Cronograma.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Cronograma.DeleteAll">
            <summary>
            Elimina todas los Cronogramas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Cronograma.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Cronograma.RellenaHorasSemana(System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean})">
            <summary>
            Rellena una lista de sublistas que contienen los índices de comienzo de las clases de determinada duración
            lista[0] : 1 hora
            lista[1] : 2 horas
            lista[2] : 3 horas
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Cronograma.SELECT_CRONOGRAMA(System.Int64,System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Cronograma.UNION_CLASES(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulo">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.DeleteAll">
            <summary>
            Elimina todas los Submodulos
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.GetClasesPracticas(System.Int64,System.Int64,System.Int64,System.DateTime)">
            <summary>
            Obtiene la lista de clases de prácticas asociadas a una promoción que aún no han sido programadas
            más las asignadas al horario actual
            </summary>
            <param name="oid_plan"></param>
            <param name="oid_promocion"></param>
            <param name="fecha"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.SELECT_CLASES_TEORIA(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.SELECT_CLASES_PRACTICA(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.UNION_CLASES(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.INNER_JOIN_CLASE_SESION(System.Int64,System.Int64,System.Int64)">
            <summary>
            Construye la tabla 
            Dado un Oid de Clase (Teórica o Práctica), comprueba que dicha clase no contenga ya una sesión
            asociada en otro horario de la misma promoción
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo.SELECT_CLASE_EXTRA">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Modulo">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Modulo.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>		
        </member>
        <member name="M:moleQule.Library.Instruction.Modulo.GetNewCode">
            <summary>
            Devuelve el siguiente código de Módulo.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Modulo.GetNewSerial">
            <summary>
            Devuelve el siguiente Serial de Alumno.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Modulo.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero es protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Modulo.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">True si se quiere que traiga los hijos</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Modulo.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Modulo.DeleteAll">
            <summary>
            Elimina todos los Clientes, Contactos de Cliente y Cuentas de Cliente
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Conceptos_Partes">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RespuestaExamens">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RespuestaExamenList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.RespuestaExamenInfo})">
            <summary>
            Builds a RespuestaExamenList from a IList<!--<RespuestaExamenInfo>-->
            </summary>
            <param name="list"></param>
            <returns>RespuestaExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.RespuestaExamen})">
            <summary>
            Builds a RespuestaExamenList from IList<!--<RespuestaExamen>-->
            </summary>
            <param name="list"></param>
            <returns>RespuestaExamenList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_ExamenList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_ExamenInfo})">
            <summary>
            Builds a Alumno_ExamenList from a IList<!--<Alumno_ExamenInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenList.GetExamenList(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_Examen})">
            <summary>
            Builds a Alumno_ExamenList from IList<!--<Alumno_Examen>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_ExamenInfo})">
            <summary>
            Builds a RegistroFaltasList from a IList<!--<RegistroFaltasInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.CursoList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.CursoInfo})">
            <summary>
            Builds a ClienteList from a IList<!--<ClienteInfo>-->.
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumnos">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumnos.SELECT">
            <summary>
            Construye el SELECT de la lista
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Resources.Labels">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Labels.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Labels.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Labels.APTO_LABEL">
            <summary>
              Looks up a localized string similar to APTO.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Labels.FALTA_ASISTENCIA_LABEL">
            <summary>
              Looks up a localized string similar to FALTA ASISTENCIA.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Labels.NO_APTO_LABEL">
            <summary>
              Looks up a localized string similar to NO APTO.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Labels.SIN_CALIFICAR_LABEL">
            <summary>
              Looks up a localized string similar to SIN CALIFICAR.
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseGenericaInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaInfo.CopyValues(moleQule.Library.Instruction.ClaseGenerica)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaInfo.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaInfo.Get(System.Int64)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenericaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.SesionCronogramaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.IncidenciaSesionesCronogramas">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.ModuloInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ModuloInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulo_Instructor_Promocion">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor_Promocion.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor_Promocion.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor_Promocion.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero es protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">True si se quiere que traiga los hijos</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor.DeleteAll">
            <summary>
            Elimina todos los Clientes, Contactos de Cliente y Cuentas de Cliente
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoCurso">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCurso.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCurso.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCurso.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno">
            <summary>
            Editable Root Business Object With Editable Child Collection
            Editable Child Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno.GetNewCode">
            <summary>
            Devuelve el siguiente código de Cliente.
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno.GetNumeroExpediente">
            <summary>
            Devuelve el siguiente Numero de Examen
            </summary>
            <returns>Código de 9 cifras</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno.DeleteAll">
            <summary>
            Elimina todas los Alumnos
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Respuestas">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuestas.SELECT">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuestas.SELECT_BY_MODULO(System.String,System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuestas.SELECT_BY_LIST(System.String)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Historia">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Historia.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Historia.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Historia.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.RevisionMaterialInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialInfo.Get(System.Data.IDataReader)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterialInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.MaterialDocente">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocente.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocente.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocente.DeleteAll">
            <summary>
            Elimina todas los MaterialDocentes
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocente.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.CronogramaController">
            <summary>
            Editable Root Business Object With Editable Child Collection
            Editable Child Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaController.PosibleAsignarModulo(moleQule.Library.Instruction.ClasePracticaInfo)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaController.PosibleAsignarSubmodulo(moleQule.Library.Instruction.ClasePracticaInfo)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaController.PosibleAsignarPractica(moleQule.Library.Instruction.ClasePracticaInfo,moleQule.Library.Instruction.ListaSesiones)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las clases
            teóricas programadas hasta el momento en el horario actual
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaController.PosibleAsignarClase(moleQule.Library.Instruction.ClasePracticaInfo)">
            <summary>
            Comprueba que sea posible asignar una clase práctica en función de las prioridades
            establecidas en el plan de estudios y en función de las clases teóricas impartidas 
            hasta el momento
            </summary>
            <param name="cl"></param>
            <param name="lista"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaController.QuedanClasesSubmodulo(moleQule.Library.Instruction.ClaseTeoricaInfo,System.Int32,System.Int32@)">
            <summary>
            Comprueba que queden clases del mismo submódulo por impartir para rellenar el hueco con el 
            número de horas de la sesión
            </summary>
            <param name="clase"></param>
            <param name="n_horas"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaController.LaboratorioLibre(System.Int32,System.Int64,moleQule.Library.Instruction.ListaSesiones,System.Int64)">
            <summary>
            Función que comprueba que se pueda realizar una práctica en una sesión determinada 
            en función del campo Incompatible de la clase práctica
            </summary>
            <param name="lista_sesiones">sesiones del horario actual</param>
            <param name="_instructores_asignados">lista de horarios de la misma semana para otras promociones</param>
            <param name="index">índice de la sesión en la que se va a insertar la clase práctica</param>
            <param name="incompatible">campo Incompatible de la práctica</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaController.ObtieneNombreModulo(System.Int64,System.Int64,moleQule.Library.Instruction.ModuloList)">
            <summary>
            Función que devuelve el nombre del módulo a la que pertenece una clase a partir del
            Oid y el tipo de la misma
            </summary>
            <param name="oid"></param>
            <param name="tipo"></param>
            <param name="teoricas"></param>
            <param name="practicas"></param>
            <param name="extras"></param>
            <param name="modulos"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaController.MismoModuloMismoDia(System.Int32,moleQule.Library.Instruction.ClaseTeoricaInfo,moleQule.Library.Instruction.ListaSesiones)">
            <summary>
            Comprueba que no se impartan varias sesiones del mismo módulo el mismo día
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Instructor_Promocion">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_Promocion.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_Promocion.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_Promocion.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_Promocion.DeleteAll">
            <summary>
            Elimina todas los Instructor_Promocions
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_Promocion.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Concepto_ParteList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Concepto_ParteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Concepto_ParteInfo})">
            <summary>
            Builds a Concepto_ParteList from a IList<!--<Concepto_ParteInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Concepto_ParteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Concepto_ParteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Concepto_Parte})">
            <summary>
            Builds a Concepto_ParteList from IList<!--<Concepto_Parte>-->
            </summary>
            <param name="list"></param>
            <returns>Concepto_ParteList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.FestivoList">
            <summary>
            ReadOnly Business Object Root Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoList.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoList.Fetch(System.Collections.Generic.IList{moleQule.Library.Instruction.Festivo})">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="lista">IList origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoList.Fetch(System.Data.IDataReader)">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="reader">IDataReader origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.FestivoList.Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
        </member>
        <member name="T:moleQule.Library.Instruction.RespuestaExamenInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamenInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPrint.CopyValues(moleQule.Library.Instruction.ExamenInfo,moleQule.Library.Common.CompanyInfo,System.String,System.String)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_ExamenInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenInfo.#ctor(moleQule.Library.Instruction.Alumno_Examen,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="reader"><see cref="!:BusinessBaseEx"/> origen</param>
            <param name="copy_childs">Flag para copiar los hijos</param>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenInfo.Get(System.Int32,System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.CursoInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.CursoInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_Partes">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoClientes">
            <summary>
            Editable Business Object Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.NewItem(moleQule.Library.Invoice.Cliente)">
            <summary>
            Crea un nuevo elemento y lo añade a la lista
            </summary>
            <returns>Nuevo item</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.#ctor(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCliente})">
            <summary>
            Constructor
            </summary>
            <param name="lista">IList de objetos</param>
            <remarks>NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="lista">IList de objetos</param>
            <param name="retrieve_childs">Flag para indicar si quiere obtener los hijos</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.NewChildList">
            <summary>
            Construye una nueva lista vacía
            </summary>
            <returns>Lista vacía</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCliente})">
            <summary>
            Construye una nueva lista
            </summary>
            <param name="lista">IList origen</param>
            <returns>Lista creada</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.GetChildList(System.Data.IDataReader)">
            <summary>
            Construye una nueva lista
            </summary>
            <param name="reader">IDataReader origen</param>
            <returns>Lista creada</returns>
            <remarks>Obtiene los hijos</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.GetChildList(System.Data.IDataReader,System.Boolean)">
            <summary>
            Construye una nueva lista
            </summary>
            <param name="reader">IDataReader origen</param>
            <param name="retrieve_childs">Flag para indicar si quiere obtener los hijos</param>
            <returns>Lista creada</returns>
            <remarks>Obtiene los hijos</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.Fetch(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCliente})">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="lista">IList origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.Fetch(System.Data.IDataReader)">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="reader">IDataReader origen con los elementos a insertar</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.Update(moleQule.Library.Invoice.Cliente)">
            <summary>
            Realiza el Save de los objetos de la lista. Inserta, Actualiza o Borra en función
            de los flags de cada objeto de la lista
            </summary>
            <param name="parent">BusinessBaseEx padre de la lista</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClientes.SELECT(System.String,System.Object)">
            <summary>
            Construye el SELECT de la lista
            </summary>
            <param name="parent_field"></param>
            <param name="field_value"></param>
            <param name="order_field"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Sesion_Promocion">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion_Promocion.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion_Promocion.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesion_Promocion.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PlanEstudiosList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudiosList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudiosList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudiosList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudiosList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.PlanEstudiosInfo})">
            <summary>
            Builds a ClienteList from a IList<!--<ClienteInfo>-->.
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudiosList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PlanEstudios">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudios.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero es protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudios.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">True si se quiere que traiga los hijos</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudios.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudios.DeleteAll">
            <summary>
            Elimina todos los Planes de Estudio y sus listas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudios.Merge(System.Int64)">
            <summary>
            Función para la unión de dos planes de estudio
            </summary>
            <param name="oid"></param>
        </member>
        <member name="T:moleQule.Library.Instruction.Material_Plans">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_Plans.DataPortal_Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
            <remarks>LA UTILIZA EL DATAPORTAL</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_Plans.Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_PlanPrint.CopyValues(moleQule.Library.Instruction.Material_PlanInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Material_Alumnos">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.SesionCronograma">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronograma.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronograma.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronograma.DeleteAll">
            <summary>
            Elimina todas los SesionCronogramas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronograma.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulos">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulos.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulos.GetListByModulo(System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulos.DataPortal_Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
            <remarks>LA UTILIZA EL DATAPORTAL</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulos.Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Disponibilidades">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Disponibilidades.DataPortal_Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
            <remarks>LA UTILIZA EL DATAPORTAL</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Disponibilidades.Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
        </member>
        <member name="T:moleQule.Library.Instruction.ParteAsistencias">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Convocatoria_CursoInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Convocatoria_CursoInfo.Get(System.Data.IDataReader)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_Parte">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Parte.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Parte.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_Parte.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoClienteList">
            <summary>
            ReadOnly Business Object Root Collection
            ReadOnly Business Object Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.#ctor(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCliente},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.#ctor(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoClienteInfo},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetList">
            <summary>
            Default call for GetList(bool retrieve_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="retrieve_childs">Retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCliente})">
            <summary>
            Construye la lista
            </summary>
            <param name="list">IList origen</param>
            <returns>Lista de objetos de solo lectura</returns>
            <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoClienteInfo})">
            <summary>
            Construye la lista
            </summary>
            <param name="list">IList origen</param>
            <returns>Lista de objetos de solo lectura</returns>
            <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCliente})">
            <summary>
            Construye la lista
            </summary>
            <param name="list">IList origen</param>
            <returns>Lista de objetos de solo lectura</returns>
            <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCliente},System.Boolean)">
            <summary>
            Construye la lista
            </summary>
            <param name="list">IList origen</param>
            <param name="retrieve_childs">Flag para indicar si quiere obtener los hijos</param>
            <returns>Lista de objetos de solo lectura</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetChildList(System.Data.IDataReader)">
            <summary>
            Construye la lista
            </summary>
            <param name="reader">IDataReader</param>
            <returns>Lista de objetos de solo lectura</returns>
            <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetChildList(System.Data.IDataReader,System.Boolean)">
            <summary>
            Construye la lista
            </summary>
            <param name="reader">IDataReader</param>
            <param name="retrieve_childs">Flag para indicar si quiere obtener los hijos</param>
            <returns>Lista de objetos de solo lectura</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoClienteInfo})">
            <summary>
            Construye la lista
            </summary>
            <param name="list">IList origen</param>
            <returns>Lista de objetos de solo lectura</returns>
            <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.Fetch(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCliente})">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="lista">IList origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.Fetch(System.Data.IDataReader)">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="reader">IDataReader origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoClienteList.Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoInfo})">
            <summary>
            Builds a AlumnoList from a IList<!--<AlumnoInfo>-->
            </summary>
            <param name="list"></param>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno})">
            <summary>
            Builds a AlumnoList from IList<!--<Alumno>-->
            </summary>
            <param name="list"></param>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetOrdenAlfabeticoList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetOrdenAlfabeticoList(System.Boolean,System.Collections.Generic.List{moleQule.Library.Instruction.Alumno_ExamenInfo})">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetAlumnosAdmitidosList(System.Int64,System.Boolean,System.Int64,moleQule.Library.Instruction.ExamenPromocionList,System.DateTime,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetList(System.Boolean,System.String)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetListByPromocion(System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoInfo})">
            <summary>
            Builds a AlumnoList from a IList<!--<AlumnoInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>AlumnoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno})">
            <summary>
            Builds a AlumnoList from a IList<!--<Alumno>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.NotaPracticasList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetListByPromo(System.Boolean,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetListByAlumno(System.Boolean,System.Int64)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetList(System.Boolean)">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.NotaPracticasInfo})">
            <summary>
            Builds a NotaPracticasList from a IList<!--<NotaPracticasInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.NotaPracticas})">
            <summary>
            Builds a NotaPracticasList from a IList<!--<NotaPracticas>-->
            </summary>
            <param name="list"></param>
            <returns>NotaPracticasList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Preguntas_Plantilla">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas_Plantilla.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas_Plantilla.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas_Plantilla.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.MaterialDocenteList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.MaterialDocenteInfo})">
            <summary>
            Builds a MaterialDocenteList from a IList<!--<MaterialDocenteInfo>-->
            </summary>
            <param name="list"></param>
            <returns>MaterialDocenteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.MaterialDocente})">
            <summary>
            Builds a MaterialDocenteList from IList<!--<MaterialDocente>-->
            </summary>
            <param name="list"></param>
            <returns>MaterialDocenteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>MaterialDocenteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>MaterialDocenteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.MaterialDocenteInfo})">
            <summary>
            Builds a MaterialDocenteList from a IList<!--<MaterialDocenteInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>MaterialDocenteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.MaterialDocente})">
            <summary>
            Builds a MaterialDocenteList from a IList<!--<MaterialDocente>-->
            </summary>
            <param name="list"></param>
            <returns>MaterialDocente</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.SubmoduloList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.SubmoduloInfo})">
            <summary>
            Builds a SubmoduloList from a IList<!--<SubmoduloInfo>-->
            </summary>
            <param name="list"></param>
            <returns>SubmoduloList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Submodulo})">
            <summary>
            Builds a SubmoduloList from IList<!--<Submodulo>-->
            </summary>
            <param name="list"></param>
            <returns>SubmoduloList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SubmoduloList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetModuloList(System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SubmoduloList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>SubmoduloList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.SubmoduloInfo})">
            <summary>
            Builds a SubmoduloList from a IList<!--<SubmoduloInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>SubmoduloList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Submodulo})">
            <summary>
            Builds a SubmoduloList from a IList<!--<Submodulo>-->
            </summary>
            <param name="list"></param>
            <returns>Submodulo</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetInstructorList(System.Int64)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulo_Instructor">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor.DeleteAll">
            <summary>
            Elimina todas los Submodulo_Instructors
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_Instructor.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Curso_InstructorList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Curso_InstructorList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Curso_InstructorInfo})">
            <summary>
            Builds a Curso_InstructorList from a IList<!--<Curso_InstructorInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Curso_InstructorList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Curso_InstructorList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Curso_Instructor})">
            <summary>
            Builds a Curso_InstructorList from IList<!--<Curso_Instructor>-->
            </summary>
            <param name="list"></param>
            <returns>Curso_InstructorList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Concepto_ParteInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Concepto_ParteInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.PreguntaExamens">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.EstadisticaExamenList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetList(System.Int64,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetList(System.Int64)">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetList">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetList(System.Boolean)">
            <summary>
            Default call for GetList(bool get_childs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.EstadisticaExamenInfo})">
            <summary>
            Builds a EstadisticaExamenList from a IList<!--<EstadisticaExamenInfo>-->.
            Doesnt retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetSortedList(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Devuelve una lista ordenada de todos los elementos y sus hijos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <param name="childs">Traer hijos</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.EstadisticaExamen})">
            <summary>
            Builds a EstadisticaExamenList from a IList<!--<EstadisticaExamen>-->
            </summary>
            <param name="list"></param>
            <returns>EstadisticaExamenList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Preguntas_Plantillas">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseExtras">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.PlanEstudiosInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudiosInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudiosInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.PlanEstudiosInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Material_Alumno">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Material_Alumno.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_Alumno.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Material_Alumno.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.IncidenciaCronogramaList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.IncidenciaCronogramaInfo})">
            <summary>
            Builds a IncidenciaCronogramaList from a IList<!--<IncidenciaCronogramaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>IncidenciaCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.IncidenciaCronograma})">
            <summary>
            Builds a IncidenciaCronogramaList from IList<!--<IncidenciaCronograma>-->
            </summary>
            <param name="list"></param>
            <returns>IncidenciaCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>IncidenciaCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>IncidenciaCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.IncidenciaCronogramaInfo})">
            <summary>
            Builds a IncidenciaCronogramaList from a IList<!--<IncidenciaCronogramaInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>IncidenciaCronogramaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.IncidenciaCronograma})">
            <summary>
            Builds a IncidenciaCronogramaList from a IList<!--<IncidenciaCronograma>-->
            </summary>
            <param name="list"></param>
            <returns>IncidenciaCronograma</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Pregunta_ExamenList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta_ExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Pregunta_ExamenInfo})">
            <summary>
            Builds a Pregunta_ExamenList from a IList<!--<Pregunta_ExamenInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Pregunta_ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta_ExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Pregunta_Examen})">
            <summary>
            Builds a Pregunta_ExamenList from IList<!--<Pregunta_Examen>-->
            </summary>
            <param name="list"></param>
            <returns>Pregunta_ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamenPrint.CopyValues(moleQule.Library.Instruction.RespuestaExamenInfo,moleQule.Library.Instruction.PreguntaExamenInfo,moleQule.Library.Instruction.Preguntas,moleQule.Library.Instruction.ExamenInfo,System.Boolean)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ExamenPrint.CopyValues(moleQule.Library.Instruction.Alumno_ExamenInfo,moleQule.Library.Instruction.AlumnoInfo,System.Int32,System.Boolean)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Curso">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Curso.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero es protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Curso.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">True si se quiere que traiga los hijos</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Curso.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Curso.DeleteAll">
            <summary>
            Elimina todos los Cursos y sus listas
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.SerialAlumnoInfo">
            <summary>
            ReadOnly Root Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SerialAlumnoInfo.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Object creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.SerialAlumnoInfo.GetNext">
            <summary>
            Obtiene el siguiente serial para una entidad desde la base de datos
            </summary>
            <param name="entity">Tipo de Entidad</param>
            <returns>Objeto <see cref="!:ReadOnlyBaseEx"/>Construido a partir del registro</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SerialAlumnoInfo.SELECT_BY_PROMOCION(System.Int64)">
            <summary>
            Obtiene el siguiente serial para una entidad desde la base de datos
            </summary>
            <param name="entity">Tipo de Entidad</param>
            <returns>Objeto <see cref="!:ReadOnlyBaseEx"/>Construido a partir del registro</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Resources.Paths">
            <summary>
              Clase de recurso con establecimiento inflexible de tipos, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso con establecimiento inflexible de tipos.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.FOTO_ALUMNOS">
            <summary>
              Busca una cadena traducida similar a Fotos\Alumnos\.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.FOTO_INSTRUCTORES">
            <summary>
              Busca una cadena traducida similar a Fotos\Instructores\.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.FOTO_PREGUNTAS">
            <summary>
              Busca una cadena traducida similar a Fotos\Preguntas\.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.FOTO_PREGUNTAS_EXAMENES">
            <summary>
              Busca una cadena traducida similar a Fotos\PreguntasExamen\.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.MODELO_PREGUNTAS">
            <summary>
              Busca una cadena traducida similar a Fotos\Preguntas\.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.MODELO_PREGUNTAS_EXAMENES">
            <summary>
              Busca una cadena traducida similar a Fotos\PreguntasExamen\.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Paths.RESOURCES_ROOT">
            <summary>
              Busca una cadena traducida similar a Fotos\PreguntasExamen\.
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RegistroDisponibilidad">
            <summary>
            Editable Root Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.CopyValues(moleQule.Library.Instruction.RegistroDisponibilidad)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.DeleteAll">
            <summary>
            Elimina todos los Area. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.#ctor(moleQule.Library.Instruction.RegistroDisponibilidad,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.RegistroDisponibilidad.GetChild(moleQule.Library.Instruction.RegistroDisponibilidad)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.RegistroDisponibilidad.GetChild(moleQule.Library.Instruction.RegistroDisponibilidad,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.RegistroDisponibilidad.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.RegistroDisponibilidad.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.Fetch(moleQule.Library.Instruction.RegistroDisponibilidad)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RegistroDisponibilidad.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <member name="T:moleQule.Library.Instruction.NotaPracticasInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasInfo.CopyValues(moleQule.Library.Instruction.NotaPracticas)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasInfo.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasInfo.#ctor(moleQule.Library.Instruction.NotaPracticas)">
            <summary>
            Contructor de AreaInfo a partir de un Area
            No copia los hijos
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasInfo.Get(System.Int64)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticasInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.EstadisticaExamenInfo">
            <summary>
            ReadOnly Root Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenInfo.CopyValues(moleQule.Library.Instruction.EstadisticaExamen)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenInfo.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenInfo.#ctor(moleQule.Library.Instruction.EstadisticaExamen)">
            <summary>
            Contructor de AreaInfo a partir de un Area
            No copia los hijos
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenInfo.Get(System.Int64)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un AreaInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.EstadisticaExamenInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.MaterialDocenteInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteInfo.Get(System.Data.IDataReader)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MaterialDocenteInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.SubmoduloInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.SubmoduloInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Curso_InstructorInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Curso_InstructorInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Sesions">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesions.SELECT_SESIONES_PROGRAMADAS(System.Int64,System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesions.SELECT_SESIONES(System.Int64,System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Sesions.SELECT_SESIONES_ORDENADAS">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ParteAsistencia">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistencia.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistencia.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistencia.DeleteAll">
            <summary>
            Elimina todas los ParteAsistencias
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ParteAsistencia.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RespuestaExamen">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamen.CopyValues(moleQule.Library.Instruction.Respuesta)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamen.CopyValues(moleQule.Library.Instruction.RespuestaInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamen.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamen.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RespuestaExamen.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ExamenPromociones">
            <summary>
            Editable Business Object Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.NewItem(moleQule.Library.Instruction.Examen)">
            <summary>
            Crea un nuevo elemento y lo añade a la lista
            </summary>
            <returns>Nuevo item</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.#ctor(System.Collections.Generic.IList{moleQule.Library.Instruction.ExamenPromocion})">
            <summary>
            Constructor
            </summary>
            <param name="lista">IList de objetos</param>
            <remarks>NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.#ctor(System.Int32,System.Data.IDataReader,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="lista">IList de objetos</param>
            <param name="retrieve_childs">Flag para indicar si quiere obtener los hijos</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.NewChildList">
            <summary>
            Construye una nueva lista vacía
            </summary>
            <returns>Lista vacía</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ExamenPromocion})">
            <summary>
            Construye una nueva lista
            </summary>
            <param name="lista">IList origen</param>
            <returns>Lista creada</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.GetChildList(System.Int32,System.Data.IDataReader)">
            <summary>
            Construye una nueva lista
            </summary>
            <param name="reader">IDataReader origen</param>
            <returns>Lista creada</returns>
            <remarks>Obtiene los hijos</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.Fetch(System.Collections.Generic.IList{moleQule.Library.Instruction.ExamenPromocion})">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="lista">IList origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.Fetch(System.Data.IDataReader)">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="reader">IDataReader origen con los elementos a insertar</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromociones.Update(moleQule.Library.Instruction.Examen)">
            <summary>
            Realiza el Save de los objetos de la lista. Inserta, Actualiza o Borra en función
            de los flags de cada objeto de la lista
            </summary>
            <param name="parent">BusinessBaseEx padre de la lista</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Respuesta_Alumno_Examenes">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta_Alumno_Examenes.DataPortal_Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
            <remarks>LA UTILIZA EL DATAPORTAL</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta_Alumno_Examenes.Fetch(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="criteria">Criterios de la consulta</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Messages.DB_VERSION_HIGHER">
            <summary>
              Looks up a localized string similar to La versión de la base de datos para el módulo Store {0} es superior a la versión requerida por la aplicación {1}. Necesita actualizar el código a la versión {2} o superior..
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.Messages.DB_VERSION_LOWER">
            <summary>
              Looks up a localized string similar to La versión de la base de datos para el módulo Store {0} es inferior a la versión requerida por la aplicación {1}. Es necesario actualizar la base de datos a la versión {2}..
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.Resources.ElementosSeguros">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.ALUMNO">
            <summary>
              Looks up a localized string similar to 401.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.CURSO">
            <summary>
              Looks up a localized string similar to 402.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.CURSO_FORMACION">
            <summary>
              Looks up a localized string similar to 403.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.EXAMEN">
            <summary>
              Looks up a localized string similar to 404.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.HORARIO">
            <summary>
              Looks up a localized string similar to 405.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.INSTRUCTOR">
            <summary>
              Looks up a localized string similar to 406.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.MATERIAL_DOCENTE">
            <summary>
              Looks up a localized string similar to 407.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.MODULO">
            <summary>
              Looks up a localized string similar to 408.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.PARTE_ASISTENCIA">
            <summary>
              Looks up a localized string similar to 409.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.PLAN_ESTUDIOS">
            <summary>
              Looks up a localized string similar to 410.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.PLAN_EXTRA">
            <summary>
              Looks up a localized string similar to 411.
            </summary>
        </member>
        <member name="P:moleQule.Library.Instruction.Resources.ElementosSeguros.PROMOCION">
            <summary>
              Looks up a localized string similar to 412.
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.InformePreguntas">
            <summary>
            Editable Root Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.CopyValues(moleQule.Library.Instruction.InformePreguntas)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.DeleteAll">
            <summary>
            Elimina todos los Area. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.#ctor(moleQule.Library.Instruction.InformePreguntas,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.InformePreguntas.GetChild(moleQule.Library.Instruction.InformePreguntas)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.InformePreguntas.GetChild(moleQule.Library.Instruction.InformePreguntas,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.InformePreguntas.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.InformePreguntas.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.InformePreguntas.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.Fetch(moleQule.Library.Instruction.InformePreguntas)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.InformePreguntas.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <member name="T:moleQule.Library.Instruction.ClaseGenerica">
            <summary>
            Editable Root Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.CopyValues(moleQule.Library.Instruction.ClaseGenerica)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.DeleteAll">
            <summary>
            Elimina todos los Area. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.#ctor(moleQule.Library.Instruction.ClaseGenerica,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ClaseGenerica.GetChild(moleQule.Library.Instruction.ClaseGenerica)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ClaseGenerica.GetChild(moleQule.Library.Instruction.ClaseGenerica,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ClaseGenerica.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.ClaseGenerica.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.Fetch(moleQule.Library.Instruction.ClaseGenerica)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ClaseGenerica.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Preguntas">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas.Merge(moleQule.Library.Instruction.Preguntas,moleQule.Library.Instruction.Preguntas)">
            <summary>
            Pega dos listas
            </summary>
            <param name="criteria">Filtro</param>
            <returns>Lista</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas.SELECT">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas.SELECT_PREGUNTAS">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas.SELECT_BY_LIST(System.String)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Preguntas.SELECT_PREGUNTAS_FILTRADAS(System.Int64,System.Int64,System.Int64,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.IncidenciaSesionCronograma">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronograma.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronograma.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronograma.DeleteAll">
            <summary>
            Elimina todas los IncidenciaSesionCronogramas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaSesionCronograma.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.IncidenciaCronogramaInfo">
            <summary>
            ReadOnly Child Business Object with ReadOnly Childs
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaInfo.Get(System.Int64)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaInfo.Get(System.Int64,System.Boolean)">
            <summary>
            Devuelve un ClienteInfo tras consultar la base de datos
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaInfo.Get(System.Data.IDataReader)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronogramaInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.IncidenciaCronograma">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronograma.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronograma.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronograma.DeleteAll">
            <summary>
            Elimina todas los IncidenciaCronogramas
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.IncidenciaCronograma.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.CronogramaPrint.CopyValues(moleQule.Library.Instruction.CronogramaInfo,moleQule.Library.Common.CompanyInfo,moleQule.Library.Instruction.PlanEstudiosInfo,moleQule.Library.Instruction.PromocionInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulos_Instructores_Promociones">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulos_Instructores_Promociones.SELECT_BY_INSTRUCTOR_PROMOCION(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulos_Instructores_Promociones.SELECT_BY_INSTRUCTOR_PROMOCION(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Instructor_Promociones">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_Promociones.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <param name="get_childs">retrieving the childs</param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Instructor_Promociones.SELECT_BY_FIELD(System.String,System.String,System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Clase_Parte">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Clase_Parte.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Clase_Parte.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Clase_Parte.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Pregunta_ExamenInfo">
            <summary>
            ReadOnly Child Business Object
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Pregunta_ExamenInfo.Get(System.Data.IDataReader,System.Boolean)">
            <summary>
            Copia los datos al objeto desde un IDataReader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Examens">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Examens.SELECT_EXAMENES_PENDIENTES(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Examens.SELECT_BY_FECHA(System.DateTime)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.AlumnoCursoList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCursoList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCursoInfo})">
            <summary>
            Builds a Alumno_CursoList from a IList<!--<Alumno_CursoInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCursoList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.AlumnoCurso})">
            <summary>
            Builds a Alumno_CursoList from IList<!--<Alumno_Curso>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.AlumnoCursoList.GetAlumnosList(System.Int64)">
            <summary>
            Devuelve una lista de todos los alumno_cursos asociados a un curso
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.MatriculaPrint.CopyValues(moleQule.Library.Instruction.AlumnoInfo)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.NotaPracticas">
            <summary>
            Editable Root Business Object With Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.CloneAsNew">
            <summary>
            Clona la entidad y sus subentidades y las marca como nuevas
            </summary>
            <returns>Una entidad clon</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.CopyValues(moleQule.Library.Instruction.NotaPracticas)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.CopyValues(System.Data.IDataReader)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.DeleteAll">
            <summary>
            Elimina todos los Area. 
            Si no existe integridad referencial, hay que eliminar las listas hijo en esta función.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION New o NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate.
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.#ctor(moleQule.Library.Instruction.NotaPracticas,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            NO UTILIZAR DIRECTAMENTE. LAS UTILIZAN LAS FUNCIONES DE CREACION DE LISTAS
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.NewChild">
            <summary>
            Crea un nuevo objeto
            </summary>
            <returns>Nuevo objeto creado</returns>
            La utiliza la BusinessListBaseEx correspondiente para crear nuevos elementos
        </member>
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.NotaPracticas.GetChild(moleQule.Library.Instruction.NotaPracticas)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.NotaPracticas.GetChild(moleQule.Library.Instruction.NotaPracticas,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.NotaPracticas.GetChild(System.Data.IDataReader)" -->
        <!-- Badly formed XML comment ignored for member "M:moleQule.Library.Instruction.NotaPracticas.GetChild(System.Data.IDataReader,System.Boolean)" -->
        <member name="M:moleQule.Library.Instruction.NotaPracticas.GetInfo">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            También copia los datos de los hijos del objeto.
            </summary>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.GetInfo(System.Boolean)">
            <summary>
            Construye y devuelve un objeto de solo lectura copia de si mismo.
            </summary>
            <param name="get_childs">Flag para solicitar que se copien los hijos</param>
            <returns>Réplica de solo lectura del objeto</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.Fetch(moleQule.Library.Instruction.NotaPracticas)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">Objeto fuente</param>
        </member>
        <member name="M:moleQule.Library.Instruction.NotaPracticas.Fetch(System.Data.IDataReader)">
            <summary>
            Construye el objeto y se encarga de obtener los
            hijos si los tiene y se solicitan
            </summary>
            <param name="source">DataReader fuente</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Promocion">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Promocion.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Promocion.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.Promocion.DeleteAll">
            <summary>
            Elimina todas los Promocions
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Promocion.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.RevisionMaterial">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterial.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los factory methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterial.Delete(System.Int64)">
            <summary>
            Borrado inmediato, no cabe "undo"
            (La función debe ser "estática")
            </summary>
            <param name="oid"></param>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterial.DeleteAll">
            <summary>
            Elimina todas los RevisionMaterials
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.RevisionMaterial.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.SesionCronogramaPrint.CopyValues(moleQule.Library.Instruction.SesionCronogramaInfo,moleQule.Library.Instruction.ModuloList,moleQule.Library.Instruction.ClaseTeoricaList,moleQule.Library.Instruction.ClasePracticaList)">
            <summary>
            Copia los atributos del objeto
            </summary>
            <param name="source">Objeto origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.ClasePracticas">
            <summary>
            Editable Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ClasePracticas.SELECT_BY_PLAN(System.Int64)">
            <summary>
            Construye la tabla 
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="sesion"></param>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Submodulo_InstructorList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Submodulo_InstructorInfo})">
            <summary>
            Builds a Submodulo_InstructorList from a IList<!--<Submodulo_InstructorInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Submodulo_InstructorList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Submodulo_Instructor})">
            <summary>
            Builds a Submodulo_InstructorList from IList<!--<Submodulo_Instructor>-->
            </summary>
            <param name="list"></param>
            <returns>Submodulo_InstructorList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>Submodulo_InstructorList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Submodulo_InstructorInfo})">
            <summary>
            Builds a Submodulo_InstructorList from a IList<!--<Submodulo_InstructorInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>Submodulo_InstructorList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Submodulo_Instructor})">
            <summary>
            Builds a Submodulo_InstructorList from a IList<!--<Submodulo_Instructor>-->
            </summary>
            <param name="list"></param>
            <returns>Submodulo_Instructor</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Submodulo_InstructorList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.DisponibilidadList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.DisponibilidadList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.DisponibilidadInfo})">
            <summary>
            Builds a DisponibilidadList from a IList<!--<DisponibilidadInfo>-->
            </summary>
            <param name="list"></param>
            <returns>DisponibilidadList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.DisponibilidadList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Disponibilidad})">
            <summary>
            Builds a DisponibilidadList from IList<!--<Disponibilidad>-->
            </summary>
            <param name="list"></param>
            <returns>DisponibilidadList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Disponibilidad">
            <summary>
            Editable Root Business Object
            </summary>	
        </member>
        <member name="M:moleQule.Library.Instruction.Disponibilidad.#ctor">
            <summary>
            NO UTILIZAR DIRECTAMENTE, SE DEBE USAR LA FUNCION NewChild
            Debería ser private para CSLA porque la creación requiere el uso de los Factory Methods,
            pero debe ser protected por exigencia de NHibernate
            y public para que funcionen los DataGridView
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Disponibilidad.Delete">
            <summary>
            Borrado aplazado, es posible el undo 
            (La función debe ser "no estática")
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Disponibilidad.Save">
            <summary>
            No se debe utilizar esta función para guardar. Hace falta el padre.
            Utilizar Insert o Update en sustitución de Save.
            </summary>
            <returns></returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Clases_Partes">
            <summary>
            Editable Child Business Object
            </summary>
        </member>
        <member name="T:moleQule.Library.Instruction.HorarioList">
            <summary>
            Read Only Child Collection of Business Objects
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.HorarioInfo})">
            <summary>
            Builds a HorarioList from a IList<!--<HorarioInfo>-->
            </summary>
            <param name="list"></param>
            <returns>HorarioList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Horario})">
            <summary>
            Builds a HorarioList from IList<!--<Horario>-->
            </summary>
            <param name="list"></param>
            <returns>HorarioList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetList(System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>HorarioList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetHorariosPromocionList(System.Int64,System.Int64,System.DateTime,System.Boolean)">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>HorarioList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetList">
            <summary>
            Retrieve the complete list from db
            </summary>
            <returns>HorarioList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetList(moleQule.Library.CslaEx.CriteriaEx)">
            <summary>
            Devuelve una lista de todos los elementos
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.HorarioInfo})">
            <summary>
            Builds a HorarioList from a IList<!--<HorarioInfo>-->
            Doesn`t retrieve child data from DB.
            </summary>
            <param name="list"></param>
            <returns>HorarioList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetList(System.Collections.Generic.IList{moleQule.Library.Instruction.Horario})">
            <summary>
            Builds a HorarioList from a IList<!--<Horario>-->
            </summary>
            <param name="list"></param>
            <returns>Horario</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.HorarioList.GetSortedList(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Devuelve una lista ordenada de todos los elementos
            </summary>
            <param name="sortProperty">Campo de ordenación</param>
            <param name="sortDirection">Sentido de ordenación</param>
            <returns>Lista ordenada de elementos</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.ExamenPromocionList">
            <summary>
            ReadOnly Business Object Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionList.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionList.#ctor(System.Int32,System.Data.IDataReader,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <remarks>
             NO UTILIZAR DIRECTAMENTE. Objet creation require use of factory methods
            </remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ExamenPromocion})">
            <summary>
            Construye la lista
            </summary>
            <param name="list">IList origen</param>
            <returns>Lista de objetos de solo lectura</returns>
            <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionList.GetChildList(System.Int32,System.Data.IDataReader)">
            <summary>
            Construye la lista
            </summary>
            <param name="reader">IDataReader</param>
            <returns>Lista de objetos de solo lectura</returns>
            <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.ExamenPromocionInfo})">
            <summary>
            Construye la lista
            </summary>
            <param name="list">IList origen</param>
            <returns>Lista de objetos de solo lectura</returns>
            <remarks>NO OBTIENE LOS HIJOS SI EL OBJETO NO LOS TIENE CARGADOS</remarks>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionList.Fetch(System.Collections.Generic.IList{moleQule.Library.Instruction.ExamenPromocion})">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="lista">IList origen</param>
        </member>
        <member name="M:moleQule.Library.Instruction.ExamenPromocionList.Fetch(System.Data.IDataReader)">
            <summary>
            Construye la lista y obtiene los datos de los hijos de la bd
            </summary>
            <param name="reader">IDataReader origen</param>
        </member>
        <member name="T:moleQule.Library.Instruction.Respuesta_Alumno_ExamenList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta_Alumno_ExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Respuesta_Alumno_ExamenInfo})">
            <summary>
            Builds a Respuesta_Alumno_ExamenList from a IList<!--<Respuesta_Alumno_ExamenInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Respuesta_Alumno_ExamenList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Respuesta_Alumno_ExamenList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Respuesta_Alumno_Examen})">
            <summary>
            Builds a Respuesta_Alumno_ExamenList from IList<!--<Respuesta_Alumno_Examen>-->
            </summary>
            <param name="list"></param>
            <returns>Respuesta_Alumno_ExamenList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_PracticaList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_PracticaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_PracticaInfo})">
            <summary>
            Builds a Alumno_PracticaList from a IList<!--<Alumno_PracticaInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_PracticaList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_PracticaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_Practica})">
            <summary>
            Builds a Alumno_PracticaList from IList<!--<Alumno_Practica>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_PracticaList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_ParteList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ParteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_ParteInfo})">
            <summary>
            Builds a Alumno_ParteList from a IList<!--<Alumno_ParteInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_ParteList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ParteList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_Parte})">
            <summary>
            Builds a Alumno_ParteList from IList<!--<Alumno_Parte>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_ParteList</returns>
        </member>
        <member name="T:moleQule.Library.Instruction.Alumno_ConvocatoriaList">
            <summary>
            ReadOnly Root Collection of Business Objects With Child Collection
            </summary>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ConvocatoriaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_ConvocatoriaInfo})">
            <summary>
            Builds a Alumno_CursoList from a IList<!--<Alumno_CursoInfo>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ConvocatoriaList.GetChildList(System.Collections.Generic.IList{moleQule.Library.Instruction.Alumno_Convocatoria})">
            <summary>
            Builds a Alumno_CursoList from IList<!--<Alumno_Curso>-->
            </summary>
            <param name="list"></param>
            <returns>Alumno_CursoList</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ConvocatoriaList.GetAlumnosList(System.Int64)">
            <summary>
            Devuelve una lista de todos los alumno_cursos asociados a un curso
            </summary>
            <returns>Lista de elementos</returns>
        </member>
        <member name="M:moleQule.Library.Instruction.Alumno_ConvocatoriaList.SELECT(System.Int64)">
            <summary>
            Construye el SELECT de la lista
            </summary>       
            <returns></returns>
        </member>
    </members>
</doc>
